<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/29/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/AST%E5%BA%94%E7%94%A8/"/>
    <url>/2022/05/29/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/AST%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>-–</p><p>title: AST</p><p>date: 2022-05-25 18:16:56</p><p>tags: 工程化</p><p>excerpt: AST的概念与使用</p><p>-–</p><p>#工程化</p><h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><h2 id="什么是AST"><a href="#什么是AST" class="headerlink" title="什么是AST"></a>什么是AST</h2><p><code>AST</code> 是 <code>Abstract Syntax Tree</code> 的简称，是前端工程化绕不过的一个名词。它涉及到工程化诸多环节的应用，比如:</p><ol><li>如何将 Typescript 转化为 Javascript (typescript)</li><li>如何将 SASS&#x2F;LESS 转化为 CSS (sass&#x2F;less)</li><li>如何将 ES6+ 转化为 ES5 (babel)</li><li>如何将 Javascript 代码进行格式化 (eslint&#x2F;prettier)</li><li>如何识别 React 项目中的 JSX (babel)</li><li>GraphQL、MDX、Vue SFC 等等</li></ol><p>而在语言转换的过程中，实质上就是对其 AST 的操作，核心步骤就是 AST 三步走</p><ol><li>Code -&gt; AST (Parse) </li><li>AST -&gt; AST (Transform)</li><li>AST -&gt; Code (Generate)</li></ol><blockquote><p>TS转换JS的过程：TS的Code 转成 TS的AST；TS的AST转成JS的AST；JS的AST转成JS的Code</p></blockquote><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292105187.webp" alt="img"></p><p>以下是一段代码，及其对应的 AST（抽象的语法树）</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Code</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">4</span><br><br><span class="hljs-comment">// AST</span><br>&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Program&quot;</span>,<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-string">&quot;body&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;VariableDeclaration&quot;</span>,<br>      <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">11</span>,<br>      <span class="hljs-string">&quot;declarations&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;VariableDeclarator&quot;</span>,<br>          <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">6</span>,<br>          <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">11</span>,<br>          <span class="hljs-string">&quot;id&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Identifier&quot;</span>,<br>            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">6</span>,<br>            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;a&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;init&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Literal&quot;</span>,<br>            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">11</span>,<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;raw&quot;</span>: <span class="hljs-string">&quot;4&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;const&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;sourceType&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不同的语言拥有不同的解析器，比如 Javascript 的解析器和 CSS 的解析器就完全不同。（一般JS的解析器是babel，CSS的解析器是postCss）</p><p>对相同的语言，也存在诸多的解析器，也就会生成多种 AST，如 <code>babel</code> 与 <code>espree</code>。</p><p>在 <a href="https://astexplorer.net/">AST Explorer (opens new window)</a>中，列举了诸多语言的解析器(Parser)，及转化器(Transformer)。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292116023.png" alt="image-20220529211605976"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292116906.png" alt="image-20220529211636863"></p><p>使用不同的解析器，就会解析出不同的AST</p><h3 id="词法分析-Lexical-Analysis"><a href="#词法分析-Lexical-Analysis" class="headerlink" title="词法分析 (Lexical Analysis)"></a>词法分析 (Lexical Analysis)</h3><p>词法分析用以将代码转化为 <code>Token</code> 流，维护一个关于 Token 的数组</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292122553.webp" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Code</span><br>a = <span class="hljs-number">3</span><br><br><span class="hljs-comment">// Token</span><br>[<br>  &#123; <span class="hljs-attr">type</span>: &#123; ... &#125;, <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">loc</span>: &#123; ... &#125; &#125;,<br>  &#123; <span class="hljs-attr">type</span>: &#123; ... &#125;, <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">loc</span>: &#123; ... &#125; &#125;,<br>  &#123; <span class="hljs-attr">type</span>: &#123; ... &#125;, <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">loc</span>: &#123; ... &#125; &#125;,<br>  ...<br>]<br></code></pre></td></tr></table></figure><p>词法分析后的 Token 流也有诸多应用，如:</p><ol><li>代码检查，如 eslint 判断是否以分号结尾，判断是否含有分号的 token</li><li>语法高亮，如 highlight&#x2F;prism 使之代码高亮</li><li>模板语法，如 ejs 等模板也离不开</li></ol><h3 id="语法分析-Syntactic-Analysis"><a href="#语法分析-Syntactic-Analysis" class="headerlink" title="语法分析 (Syntactic Analysis)"></a>语法分析 (Syntactic Analysis)</h3><p>语法分析将 Token 流转化为结构化的 AST，方便操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Program&quot;</span>,<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-string">&quot;body&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ExpressionStatement&quot;</span>,<br>      <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">5</span>,<br>      <span class="hljs-string">&quot;expression&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;AssignmentExpression&quot;</span>,<br>        <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&quot;operator&quot;</span>: <span class="hljs-string">&quot;=&quot;</span>,<br>        <span class="hljs-string">&quot;left&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Identifier&quot;</span>,<br>          <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;a&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;right&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Literal&quot;</span>,<br>          <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">4</span>,<br>          <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">5</span>,<br>          <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">3</span>,<br>          <span class="hljs-string">&quot;raw&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;sourceType&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AST的应用"><a href="#AST的应用" class="headerlink" title="AST的应用"></a>AST的应用</h2><p><a href="https://juejin.cn/post/6844903958574530568">html的AST解析器</a></p><p>可参考一个最简编译器的实现 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler">the super tiny compiler</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://q.shanyue.tech/engineering/756.html#ast-%E7%9A%84%E7%94%9F%E6%88%90">AST是啥和它的应用</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/29/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/ESM%E4%B8%8ECJS/"/>
    <url>/2022/05/29/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/ESM%E4%B8%8ECJS/</url>
    
    <content type="html"><![CDATA[<p>-–</p><p>title: ESM与CJS</p><p>date: 2022-05-25 18:16:56</p><p>tags: 工程化</p><p>excerpt: 模块化规范.</p><p>-–</p><p>#工程化</p><h1 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h1><p>node的规范</p><h2 id="exports导出"><a href="#exports导出" class="headerlink" title="exports导出"></a>exports导出</h2><p><strong>强调：exports是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出</strong><br>bar.js</p><figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">exports.name</span> = name<span class="hljs-comment">;</span><br><span class="hljs-attr">exports.age</span> = age<span class="hljs-comment">;</span><br><span class="hljs-attr">exports.sayHello</span> = sayHello<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">const bar</span> = require(<span class="hljs-string">&#x27;./bar&#x27;</span>);<br></code></pre></td></tr></table></figure><p>上面这行代码意味着main中的bar变量等于exports对象；</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">main中的bar <span class="hljs-operator">=</span> bar中的exports<br></code></pre></td></tr></table></figure><p>所以，我们可以使用使用bar这个对象</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">const</span> bar = require(<span class="hljs-string">&#x27;./bar&#x27;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">name</span> = bar.<span class="hljs-keyword">name</span>;<br><span class="hljs-keyword">const</span> age = bar.age;<br><span class="hljs-keyword">const</span> sayHello = bar.sayHello;<br><br>console.log(<span class="hljs-keyword">name</span>);<br>console.log(age);<br><br>sayHello(<span class="hljs-string">&#x27;kobe&#x27;</span>);<br></code></pre></td></tr></table></figure><p>为了进一步论证，bar和exports是同一个对象：</p><ul><li>所以，bar对象是exports对象的<strong>浅拷贝</strong>；</li><li>浅拷贝的本质就是一种引用的赋值而已；</li></ul><h2 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h2><p>我们追根溯源，通过维基百科中对CommonJS规范的解析：</p><ul><li>CommonJS中是没有module.exports的概念的；</li><li>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是module；</li><li>所以在Node中真正用于导出的其实根本不是exports，而是module.exports；</li><li>因为module才是导出的真正实现者；</li></ul><p>但是，为什么exports也可以导出呢？</p><ul><li>这是因为module对象的exports属性是exports对象的一个引用；</li><li>也就是说 module.exports &#x3D; exports &#x3D; main中的bar；</li></ul><p><strong>注意：真正导出的模块内容的核心其实是module.exports，只是为了实现CommonJS的规范，刚好module.exports对exports对象有一个引用而已；</strong></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292127882.png" alt="img"></p><ul><li>结论：和exports对象没有任何关系了，exports你随便玩自己的吧；</li><li>module.exports我现在导出一个自己的对象，不带着你玩了；</li><li>新的对象取代了exports对象的导出，那么就意味着require导入的对象是新的对象；</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292128757.png" alt="img"></p><h2 id="require细节"><a href="#require细节" class="headerlink" title="require细节"></a>require细节</h2><p>我们现在已经知道，require是一个函数，可以帮助我们引入一个文件（模块）中导入的对象。</p><p>那么，require的查找规则是怎么样的呢？ <a href="https://nodejs.org/dist/latest-v14.x/docs/api/modules.html#modules_all_together">node官方文档require</a></p><h2 id="模块加载顺序"><a href="#模块加载顺序" class="headerlink" title="模块加载顺序"></a>模块加载顺序</h2><p>这里我们研究一下模块的加载顺序问题。</p><ul><li>结论一：模块在被第一次引入时，模块中的js代码会被运行一次</li><li>结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</li></ul><blockquote><p>为什么只会加载运行一次呢？</p><ul><li>这是因为每个模块对象module都有一个属性：loaded。</li><li>为false表示还没有加载，为true表示已经加载；</li></ul></blockquote><ul><li>结论三：如果有循环引入，那么加载顺序是什么？</li></ul><blockquote><p>如果出现下面模块的引用关系，那么加载顺序是什么呢？</p><ul><li>这个其实是一种数据结构：图结构；</li><li>图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）；</li><li>Node采用的是深度优先算法：main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291346848.png" alt="55f36dbec645630eb35a864be36c0ff6.png"></p><h1 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h1><p>语言的规范</p><h2 id="export有三种方式"><a href="#export有三种方式" class="headerlink" title="export有三种方式"></a>export有三种方式</h2><ol><li>定义变量时，抛出</li></ol><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;Sam&#x27;</span> <br></code></pre></td></tr></table></figure><ol><li>使用{ }抛出定义的变量、函数</li></ol><ul><li>注意：这里的 {}里面不是ES6的对象字面量的增强写法，{}也不是表示一个对象的；</li><li>所以： export {name: name}，是错误的写法；</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">const</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;Sam&#x27;</span> <br><span class="hljs-keyword">export</span> <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    name</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>抛出时，可以给个别名</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Sam&#x27;</span> <br><span class="hljs-keyword">export</span> &#123;<br>    name <span class="hljs-keyword">as</span> AModuleName<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="import的三种方式"><a href="#import的三种方式" class="headerlink" title="import的三种方式"></a>import的三种方式</h2><ol><li>import { 标识符列表 } from ‘module’</li></ol><ul><li>注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容；</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123;<span class="hljs-type">name</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user_module.js&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>导入时可以给别名</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123;<span class="hljs-type">name</span> <span class="hljs-keyword">as</span> username&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user_module.js&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>将标识符里面所有的功能放到一个模块功能对象内</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user_module.js&#x27;</span><br>console.log(foo.name)<br></code></pre></td></tr></table></figure><h2 id="export与import结合"><a href="#export与import结合" class="headerlink" title="export与import结合"></a>export与import结合</h2><p>如果从一个模块中导入的内容，我们希望再直接导出出去，这个时候可以直接使用export来导出。</p><h4 id="bar-js-抛出一个函数"><a href="#bar-js-抛出一个函数" class="headerlink" title="bar.js 抛出一个函数"></a>bar.js 抛出一个函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="foo-js导入bar-js-并抛出去-做了个中转"><a href="#foo-js导入bar-js-并抛出去-做了个中转" class="headerlink" title="foo.js导入bar.js 并抛出去 做了个中转"></a>foo.js导入bar.js 并抛出去 做了个中转</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> &#123;func&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bar.js&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="main-js直接从foo中导入："><a href="#main-js直接从foo中导入：" class="headerlink" title="main.js直接从foo中导入："></a>main.js直接从foo中导入：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> &#123;<span class="hljs-function"><span class="hljs-keyword">func</span>&#125; <span class="hljs-title">from</span> &#x27;./<span class="hljs-title">module</span>/<span class="hljs-title">foo</span>.<span class="hljs-title">js</span>&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(1, 2)</span></span><br></code></pre></td></tr></table></figure><h3 id="甚至在foo-js中导出时，我们可以变化它的名字"><a href="#甚至在foo-js中导出时，我们可以变化它的名字" class="headerlink" title="甚至在foo.js中导出时，我们可以变化它的名字"></a>甚至在foo.js中导出时，我们可以变化它的名字</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">export</span> &#123;func <span class="hljs-keyword">as</span> fooFunc&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bar.js&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>为什么要这样做呢？<ul><li>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</li><li>这样方便指定统一的接口规范，也方便阅读；</li><li>这个时候，我们就可以使用export和import结合使用 ；</li></ul></li></ul><h2 id="default-重要‼️"><a href="#default-重要‼️" class="headerlink" title="default(重要‼️)"></a>default(重要‼️)</h2><p>前面我们学习的导出功能都是有名字的导出（named exports）：</p><ul><li>在导出export时指定了名字；</li><li>在导入import时需要知道具体的名字； 还有一种导出叫做默认导出（default export）</li><li>默认导出export时可以不需要指定名字；</li><li>在导入时不需要使用 {}，并且可以自己来指定名字；</li><li>它也方便我们和现有的CommonJS等规范相互操作；</li></ul><h4 id="导出："><a href="#导出：" class="headerlink" title="导出："></a>导出：</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">export default function <span class="hljs-function"><span class="hljs-keyword">sub</span>(<span class="hljs-title">num1</span>, <span class="hljs-title">num2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> num1 - num2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import <span class="hljs-keyword">a</span> <span class="hljs-built_in">from</span> <span class="hljs-string">&#x27;./module/foo.js&#x27;</span><br><span class="hljs-keyword">a</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>注意：在一个模块中，只能有一个默认导出（default export）；</strong></p><h3 id="import-方法的使用"><a href="#import-方法的使用" class="headerlink" title="import()方法的使用"></a>import()方法的使用</h3><p>对于动态加载模块的情况下</p><blockquote><p>错误使用 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291346856.png" alt="e7567502036105c87d19f0590ceb7cdc.png"></p></blockquote><blockquote><p>正确使用</p></blockquote><p>aaa.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">export <span class="hljs-keyword">function</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;aaa被打印&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>bbb.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">export <span class="hljs-keyword">function</span> <span class="hljs-title function_">bbb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;bbb被执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./modules/aaa.js&#x27;</span>).<span class="hljs-keyword">then</span>(aaa =&gt; &#123;<br>    aaa.aaa();<br>  &#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./modules/bbb.js&#x27;</span>).<span class="hljs-keyword">then</span>(bbb =&gt; &#123;<br>    bbb.bbb();<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>CJS加载文件的过程是在运行时加载的，并且是同步的。</li><li>ESM加载文件的过程是编译（解析）时加载的，是异步的。</li><li>CJS 中exports和module.exports同时使用，只会拿module.exports的东西，而ESM的export和export default同时使用都可以拿到</li><li>CJS是node的规范；ESM是语言层面的规范</li><li>ESM可在编译期进行Tree Shaking，减少js体积。</li><li>cjs 模块输出的是一个值的拷贝，esm 输出的是值的引用</li><li>cjs 模块是运行时加载，esm 是编译时加载</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>#算法 #笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    public <span class="hljs-title class_">ListNode</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">ListNode head</span>) &#123;<br>        <span class="hljs-title class_">ListNode</span> prev = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">ListNode</span> curr = head;<br><br>        <span class="hljs-keyword">while</span>(curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-title class_">ListNode</span> nxt = curr.<span class="hljs-property">next</span>;<br>            curr.<span class="hljs-property">next</span> = prev; <span class="hljs-comment">// 翻转箭头</span><br>            prev = curr; <span class="hljs-comment">//三人行</span><br>            curr = nxt; <span class="hljs-comment">//三人行</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并链表</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>#算法 #笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * function ListNode(val, next) &#123;</span><br><span class="hljs-comment"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="hljs-comment"> *     this.next = (next===undefined ? null : next)</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">l1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">l2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">ListNode</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-keyword">function</span>(<span class="hljs-params">l1, l2</span>) &#123;<br>     <span class="hljs-comment">// 定义dummy节点</span><br>    <span class="hljs-keyword">let</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    <span class="hljs-comment">// 操作cur就相当于再操作dummy，之所以在定义一个变量cur，是因为最后结果是让返回整个链表，所以返回dummy.next就可以了</span><br>    <span class="hljs-keyword">let</span> cur = dummy;<br>    <span class="hljs-comment">// l1,l2相当于两个指针，l1&amp;&amp;l2是循环结束的条件</span><br>    <span class="hljs-keyword">while</span>(l1&amp;&amp;l2)&#123;<br>        <span class="hljs-comment">// 对比指针的数值大小</span><br>        <span class="hljs-keyword">if</span>(l1.<span class="hljs-property">val</span>&gt;l2.<span class="hljs-property">val</span>)&#123;<br>            cur.<span class="hljs-property">next</span> = l2;<br>            <span class="hljs-comment">// 变量的修改，cur.next的指向不会变</span><br>            l2 = l2.<span class="hljs-property">next</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            cur.<span class="hljs-property">next</span> = l1;<br>            l1 = l1.<span class="hljs-property">next</span>;<br>        &#125;<br>        <span class="hljs-comment">// cur重新赋值</span><br>        cur=cur.<span class="hljs-property">next</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果最后发现那个链表还没有为null的话，那么cur.next就指向他</span><br>    cur.<span class="hljs-property">next</span>=(l1?<span class="hljs-attr">l1</span>:l2);<br>    <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-router的导航守卫</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/Vue%20Router/%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/Vue%20Router/%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="导航守卫（3种）"><a href="#导航守卫（3种）" class="headerlink" title="导航守卫（3种）"></a>导航守卫（3种）</h1><ul><li>全局守卫</li><li>路由独享守卫</li><li>路由组件内守卫</li></ul><h2 id="全局守卫（3种）"><a href="#全局守卫（3种）" class="headerlink" title="全局守卫（3种）"></a>全局守卫（3种）</h2><blockquote><p>写在全局配置 route.js</p></blockquote><ul><li>router.beforeEach 全局前置守卫 进入路由之前</li><li>router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用</li><li>router.afterEach 全局后置钩子 进入路由之后</li></ul><h2 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h2><blockquote><p>如果你不想全局配置守卫的话，你可以为某些路由单独配置守卫</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/foo&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Foo</span>,<br>      <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123; <br>        <span class="hljs-comment">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span><br>        <span class="hljs-comment">// ...</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;) <br></code></pre></td></tr></table></figure><h2 id="路由组件内守卫（3种）"><a href="#路由组件内守卫（3种）" class="headerlink" title="路由组件内守卫（3种）"></a>路由组件内守卫（3种）</h2><blockquote><p>写在组件内的钩子函数</p></blockquote><ul><li>beforeRouteEnter 进入路由前, 在路由独享守卫后调用 不能 获取组件实例 this，组件实例还没被创建</li><li>beforeRouteUpdate (2.2) 路由复用同一个组件时, 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 this</li><li>beforeRouteLeave 离开当前路由时, 导航离开该组件的对应路由时调用，可以访问组件实例 this</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/Vuex/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/Vuex/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>目前主要有两种数据会使用 vuex 进行管理：</p><ol><li>组件之间全局共享的数据</li><li>通过后端异步请求的数据 比如做加入购物车、登录状态等都可以使用Vuex来管理数据状态</li></ol><blockquote><p>一般面试官问到这里vue基本知识就差不多了， 如果更深入的研究就是和你探讨关于vue的底层源码；或者是具体在项目中遇到的问题，下面列举几个项目中可能遇到的问题：</p></blockquote><ul><li>开发时，改变数组或者对象的数据，但是页面没有更新如何解决？</li><li>vue弹窗后如何禁止滚动条滚动？</li><li>如何在 vue 项目里正确地引用 jquery 和 jquery-ui的插件</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>括号匹配</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%AE%97%E6%B3%95/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p>#算法 #笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 括号匹配算法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">let</span> strArr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br>        left = [];<span class="hljs-comment">// 空栈</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;strArr.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(strArr[i] == <span class="hljs-string">&#x27;(&#x27;</span> || strArr[i] == <span class="hljs-string">&#x27;[&#x27;</span> || strArr[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>            left.<span class="hljs-title function_">push</span>(strArr[i]) <span class="hljs-comment">//左括号入栈</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(strArr[i] == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; left.<span class="hljs-title function_">pop</span>() != <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">//结束循环</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(strArr[i] == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; left.<span class="hljs-title function_">pop</span>() != <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <br>            &#125;<br>            <span class="hljs-keyword">if</span>(strArr[i] == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; left.<span class="hljs-title function_">pop</span>() != <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left.<span class="hljs-property">length</span> == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">let</span> test = <span class="hljs-string">&#x27;&#123;9()32358&#125;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isValid</span>(test))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义组件Tab</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E7%BB%84%E4%BB%B6/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6Tab/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E7%BB%84%E4%BB%B6/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6Tab/</url>
    
    <content type="html"><![CDATA[<p>#自定义组件</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200957303.png"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><aside>     💡 使用van-sticky达到吸顶效果</aside><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-sticky</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switchBar&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">           <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkedLi&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in helpIndex&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: index == isActive &#125;&quot;</span></span><br><span class="hljs-tag">           @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeHelpIndex(index)&quot;</span>&gt;</span><br>           &#123;&#123; item.typeName &#125;&#125;<br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">van-sticky</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">helpIndex</span>: [&#123;<br>        <span class="hljs-attr">typeName</span>: <span class="hljs-string">&#x27;特惠区&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-number">0</span>,<br>      &#125;, &#123;<br>        <span class="hljs-attr">typeName</span>: <span class="hljs-string">&#x27;体验区&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      &#125;],<br><span class="hljs-attr">isActive</span>: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.switchBar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow-x</span>: scroll;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br><br>  <span class="hljs-selector-class">.checked</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: flex-start;<br><br><br>    <span class="hljs-selector-class">.checkedLi</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">white-space</span>: nowrap;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">142px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br><br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>      <span class="hljs-attribute">font-family</span>: PingFang SC;<br>      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.active</span> &#123;<br><br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;<br>      <span class="hljs-attribute">font-family</span>: PingFang SC;<br>      <span class="hljs-attribute">font-weight</span>: bold;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br><br>      <span class="hljs-attribute">position</span>: relative;<br>      //<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">56px</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      //<span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">2px</span> solid <span class="hljs-number">#5A8BFF</span>; //第一层下划线<br>      //<span class="hljs-attribute">margin</span>:<span class="hljs-number">63px</span> auto <span class="hljs-number">40px</span>;<br>      &amp;<span class="hljs-selector-pseudo">::after</span> &#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">23px</span>);<br>        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">46px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, <span class="hljs-number">#FF7335</span>, <span class="hljs-number">#FE3030</span>);<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">2px</span> <span class="hljs-number">9px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">254</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>, <span class="hljs-number">0.42</span>);<br>        -webkit-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>        -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0.5</span>);<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0.5</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/hbisedm/pen/yLvXNaz">https://codepen.io/hbisedm/pen/yLvXNaz</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监听数据变化</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%8E%9F%E7%90%86/Proxy%E4%B8%8EObject.defineProperty/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%8E%9F%E7%90%86/Proxy%E4%B8%8EObject.defineProperty/</url>
    
    <content type="html"><![CDATA[<p>Proxy的优势如下:</p><ul><li>Proxy可以直接监听对象而非属性</li><li>Proxy可以直接监听数组的变化</li><li>Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的</li><li>Proxy返回的是一个新对象,我们可以只操作新的对象达到目的,而- Object.defineProperty只能遍历对象属性直接修改</li><li>Proxy作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</li></ul><p>Object.defineProperty的优势如下:</p><ul><li>兼容性好,支持IE9</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的key</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%8E%9F%E7%90%86/Vue%E7%9A%84key/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%8E%9F%E7%90%86/Vue%E7%9A%84key/</url>
    
    <content type="html"><![CDATA[<ul><li>key是为Vue中的vnode标记的唯一id,通过这个key,我们的diff操作可以更准确、更快速</li><li>diff算法的过程中,先会进行新旧节点的首尾交叉对比,当无法匹配的时候会用新节点的key与旧节点进行比对,然后超出差异.</li></ul><h2 id="作用-重头戏"><a href="#作用-重头戏" class="headerlink" title="作用(重头戏)"></a>作用(重头戏)</h2><p>我们都知道，<code>Vue</code>很大的一个特点就是双向数据绑定，数据一旦改变，那么页面就渲染新的数据呈现在页面上。</p><p>那么问题来了，对于用<code>v-for</code>渲染的<strong>列表</strong>数据来说，数据量可能一般很庞大，而且我们经常还要对这个数据进行一些增删改操作。假设我们给列表增加一条数据，整个列表都要重新渲染一遍，那不就很费事了。</p><p>而<code>key</code>的出现就是尽可能的回避这个问题，提高效率，如果我们给列表增加了一条数据，页面只渲染了这数据，那不就很完美了。</p><p><code>v-for</code>默认使用就地复用策略，列表数据修改的时候，他会根据key值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.extend与Vue.component</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/Vue.extend%E4%B8%8EVue.component/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/Vue.extend%E4%B8%8EVue.component/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-extend-传入选项对象-返回构造函数"><a href="#Vue-extend-传入选项对象-返回构造函数" class="headerlink" title="Vue.extend() 传入选项对象 返回构造函数"></a>Vue.extend() 传入选项对象 返回构造函数</h1><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Vue.extend() 传入选项对象 返回构造函数</span><br>        <span class="hljs-keyword">let</span> myExtend = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jessica&#x27;</span><br>                &#125; <br>            &#125;,<br>            <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">say</span>()<br>            &#125;,<br>            <span class="hljs-attr">methods</span>: &#123;<br>                <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello guys. say by&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>                &#125;<br>            &#125;<br>        &#125;)<br>  <span class="hljs-keyword">let</span> myComp = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myExtend</span>()<br></code></pre></td></tr></table></figure><h1 id="Vue-component-‘component-name’-options-全局注册子组件"><a href="#Vue-component-‘component-name’-options-全局注册子组件" class="headerlink" title="Vue.component(‘component-name’,{options}) 全局注册子组件"></a>Vue.component(‘component-name’,{options}) 全局注册子组件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// Vue.component(&#x27;component-name&#x27;,&#123;options&#125;) 全局注册子组件</span><br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>,&#123;<br>            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>                 <span class="hljs-keyword">return</span> &#123;<br>                     <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zeng&#x27;</span><br>                 &#125;<br>             &#125;,<br>             <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;span&gt; to &#123;&#123;name&#125;&#125; &lt;/span&gt;`</span>,<br>         &#125;) <span class="hljs-comment">// option对象</span><br>        <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#vm&#x27;</span><br>        &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">/ <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-name&#x27;</span>,&#123;options&#125;) 全局注册子组件<br><span class="hljs-comment">//将Vue.component()的第二个参数修改成一个构造器</span><br>        <span class="hljs-keyword">let</span> myExennd = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>                 <span class="hljs-keyword">return</span> &#123;<br>                     <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zeng&#x27;</span><br>                 &#125;<br>             &#125;,<br>             <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;span&gt; to &#123;&#123;name&#125;&#125; &lt;/span&gt;`</span>,<br>         &#125;)<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>,myExennd) <span class="hljs-comment">//构造器</span><br>        <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#vm&#x27;</span><br>        &#125;)<br></code></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Vue.component()接收第二参数的时候，<strong>会判断是构造器还是{options}选项</strong>，如果是后者，<strong>就会隐式调用Vue.extend()返回构造器</strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发布订阅与观察者</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>#设计模式</p><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventEmitter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// &#123; eventType: [ handler1, handler2 ] &#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = &#123;&#125;<br>  &#125;<br>  <span class="hljs-comment">// 订阅通知</span><br>  $on(eventType, fn) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[eventType] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[eventType] || []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[eventType].<span class="hljs-title function_">push</span>(fn)<br>  &#125;<br>  <span class="hljs-comment">// 发布通知</span><br>  $emit(eventType) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[eventType]) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[eventType].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span><span class="hljs-title function_">v</span>())<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">var</span> bus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>()<br><br><span class="hljs-comment">// 注册事件</span><br>bus.$on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>)<br>&#125;)<br><br>bus.$on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click1&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 触发事件 </span><br>bus.$emit(<span class="hljs-string">&#x27;click&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 目标(发布者) </span><br><span class="hljs-comment">// Dependency</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-title function_">constructor</span> () &#123;<br>    <span class="hljs-comment">// 存储所有的观察者</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = []<br>  &#125;<br>  <span class="hljs-comment">// 添加观察者</span><br>  addSub (sub) &#123;<br>    <span class="hljs-keyword">if</span> (sub &amp;&amp; sub.<span class="hljs-property">update</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(sub)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 通知所有观察者</span><br>  notify () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub.<span class="hljs-title function_">update</span>())<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者(订阅者)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  update () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;update&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br><span class="hljs-keyword">let</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>()<br>dep.<span class="hljs-title function_">addSub</span>(watcher) <br>dep.<span class="hljs-title function_">notify</span>()<br></code></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li><strong>观察者模式</strong>是由具体目标调度，比如当事件触发，<code>Dep</code> 就会去调用观察者的方法，所以观察者模 式的订阅者与发布者之间是存在依赖的</li><li><strong>发布&#x2F;订阅模式</strong>由统一调度中心调用，因此发布者和订阅者不需要知道对方的存在</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205201351395.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ref的操作</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/Ref%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/Ref%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<ul><li>获取dom元素this.$refs.box</li><li>获取子组件中的data &#x3D;&gt; this.$refs.box.msg</li><li>调用子组件中的方法 &#x3D;&gt; this.$refs.box.open()</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的监听与观察</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/watch%E4%B8%8Ecomputed/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/watch%E4%B8%8Ecomputed/</url>
    
    <content type="html"><![CDATA[<p>computed:</p><ul><li>computed是计算属性,也就是计算值,它更多用于计算值的场景</li><li>computed具有缓存性,computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时才会重新调用对应的getter来计算 computed适用于计算比较消耗性能的计算场景</li></ul><p>watch:</p><ul><li>更多的是「观察」的作用,类似于某些数据的监听回调,用于观察props $emit或者本组件的值,当数据变化时来执行回调进行后续操作</li><li>无缓存性，页面重新渲染时值不变化也会执行</li></ul><p>小结:</p><ul><li>当我们要进行数值计算,而且依赖于其他数据，那么把这个数据设计为computed</li><li>如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP状态码</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>http</p><ul><li>1xx 信息性状态码 websocket upgrade</li><li>2xx 成功状态码<ul><li>200 服务器已成功处理了请求</li><li>204(没有响应体)</li><li>206(范围请求 暂停继续下载)</li></ul></li><li>3xx 重定向状态码<ul><li>301(永久) ：请求的页面已永久跳转到新的url</li><li>302(临时) ：允许各种各样的重定向，一般情况下都会实现为到  <code>GET</code>  的重定向，但是不能确保  <code>POST</code>  会重定向为  <code>POST</code></li><li>303 只允许任意请求到  <code>GET</code>  的重定向</li><li>304 未修改：自从上次请求后，请求的网页未修改过</li><li>307：<code>307</code>  和  <code>302</code>  一样，除了不允许  <code>POST</code>  到  <code>GET</code>  的重定向</li></ul></li><li>4xx 客户端错误状态码<ul><li>400 客户端参数错误</li><li>401 没有登录</li><li>403 登录了没权限 比如管理系统</li><li>404 页面不存在</li><li>405 禁用请求中指定的方法</li></ul></li><li>5xx 服务端错误状态码<ul><li>500 服务器错误：服务器内部错误，无法完成请求</li><li>502 错误网关：服务器作为网关或代理出现错误</li><li>503 服务不可用：服务器目前无法使用</li><li>504 网关超时：网关或代理服务器，未及时获取请求</li></ul></li></ul><h3 id=""><a href="#" class="headerlink" title="#"></a><a href="https://interview.html5.wiki/advance.html#_1-http%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96">#</a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-model的使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/v-model/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C/v-model/</url>
    
    <content type="html"><![CDATA[<blockquote><p>v-model是语法糖，v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件</p></blockquote><ul><li>text 和 textarea 元素使用 value 属性和 input 事件</li><li>checkbox 和 radio 使用 checked 属性和 change 事件</li><li>select 字段将 value 作为 prop 并将 change 作为事件</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公众号、H5的开发</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/%E5%85%AC%E4%BC%97%E5%8F%B7/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B8%8E%E5%BE%AE%E4%BF%A1H5%E5%BC%80%E5%8F%91%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/%E5%85%AC%E4%BC%97%E5%8F%B7/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B8%8E%E5%BE%AE%E4%BF%A1H5%E5%BC%80%E5%8F%91%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>#公众号 #微信H5开发</p><h1 id="流程（SpringBoot、Vue3）"><a href="#流程（SpringBoot、Vue3）" class="headerlink" title="流程（SpringBoot、Vue3）"></a>流程（SpringBoot、Vue3）</h1><p>面向过程写法</p><h2 id="准备工具与环境："><a href="#准备工具与环境：" class="headerlink" title="准备工具与环境："></a>准备工具与环境：</h2><ul><li>JDK1.8</li><li>Node16</li><li>IDEA</li><li>WebStorm(VS Code也可)</li><li>Docker(容器：Nginx)</li><li>ngrok(内网穿透）</li></ul><h2 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h2><ol><li><p>使用官方的包进行开发后端（需要自己一个个搭建，比较麻烦点）</p><p><a href="https://github.com/Wechat-Group/WxJava"></a><a href="https://github.com/Wechat-Group/WxJava">https://github.com/Wechat-Group/WxJava</a></p></li><li><p>使用别人写好的springboot模板快速开发后端</p><p><a href="https://github.com/binarywang/weixin-java-mp-demo"></a><a href="https://github.com/binarywang/weixin-java-mp-demo">https://github.com/binarywang/weixin-java-mp-demo</a></p></li></ol><p><em>我使用了第二种方式<em/></p><h2 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h2><p><code>申请公众号(个人订阅号)→申请测试号→配置服务器地址信息等</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200928316.png"></p><ol><li><p>测试号信息官方给我们的</p></li><li><p>接口配置信息的<strong>配置流程</strong></p><p>先将Springboot配置好测试号的信息</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200929969.png"></p><p>其中com.github.binarywang.demo.wx.mp.controller.WxPortalController#authGet，微信那边实际请求到我们这个地址(get请求做身份验证，post请求做交互作用)</p><p>配置<code>http://域名/api/wx/portal/&#123;appid&#125; 和 Token</code> 即可</p></li><li><p>域名如何生成</p><p>ngork内网穿透而来，映射的是docker里面到nginx容器，docker如何跑Nginx，google一下就行</p><p>主要配置个挂载Mounts，使得每次本地前端项目打包后就可以在手机上直接看到最新的页面情况</p></li></ol><p> <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200929871.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">4</span>;<br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment"># 开启目录文件列表</span><br>    <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment"># 显示出文件的确切大小，单位是bytes</span><br>    <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment"># 显示的文件时间为文件的服务器时间</span><br>    <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>,gbk,gb2312;  <span class="hljs-comment"># 避免中文乱码</span><br>    <span class="hljs-attribute">gzip</span>  <span class="hljs-literal">on</span>;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span> /usr/share/nginx/html;<br>            <span class="hljs-attribute">index</span> index.html;<br>            <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;  <br>        &#125;<br>        <span class="hljs-section">location</span> /assets/&#123;<br>            <span class="hljs-attribute">alias</span>  /usr/share/nginx/html/assets/;<br>        &#125;<br>        <span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /api/&#123;<br>            <span class="hljs-attribute">proxy_pass</span> &lt;http://192.168.1.8:9088/&gt;; <span class="hljs-comment">#SpringBoot服务</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到里面配置了个方向代理，代理到我们本地到SpringBoot服务，所以接口配置的URL实际访问<code>http://域名/api/wx/portal/&#123;appid&#125; =&gt; http:192.168.1.8:9088/wx/portal/&#123;appid&#125;</code></p><ol start="4"><li>JS安全域名配置ngork提供给我们的域名就行</li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="获取access-token-公众号开发需要）"><a href="#获取access-token-公众号开发需要）" class="headerlink" title="获取access_token(公众号开发需要）"></a>获取access_token(公众号开发需要）</h3><p>个人服务器通过https请求方式: GET <a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET"></a><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET">https://api.weixin.qq.com/cgi-bin/token?grant_type&#x3D;client_credential&amp;appid&#x3D;APPID&amp;secret&#x3D;APPSECRET</a>填写对应参数即可获取到access_token</p><p>weixin-java-mp-demo框架帮我们处理好了，还帮我们做了自动刷新处理，只要我们在application.yaml文件中配置没问题，其他都不用管</p><h3 id="1-公众号如何回复"><a href="#1-公众号如何回复" class="headerlink" title="1. 公众号如何回复"></a>1. 公众号如何回复</h3><p>我们使用了weixin-java-mp-demo进行开发后端，所以我们跟测试号的所有交互都会到这个方法中com.github.binarywang.demo.wx.mp.controller.WxPortalController#post</p><p>所以我们只要在对应到handler中处理不同事情就行</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200930000.png"></p><h3 id="2-自定义菜单"><a href="#2-自定义菜单" class="headerlink" title="2. 自定义菜单"></a>2. 自定义菜单</h3><p><strong>com&#x2F;github&#x2F;binarywang&#x2F;demo&#x2F;wx&#x2F;mp&#x2F;controller&#x2F;WxMenuController.java</strong>中定义了很多开发者对菜单的操作</p><h3 id="3-H5授权"><a href="#3-H5授权" class="headerlink" title="3. H5授权"></a>3. H5授权</h3><p>H5页面首先拿到code，将code发到个人服务器，个人服务器去微信服务器请求后返回open_id给H5页面，用户的access_token不要给到前端，</p><p>2种模式，snsapi_base与snsapi_userinfo</p><p>snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</p><h3 id="4-H5调用weixin-sdk"><a href="#4-H5调用weixin-sdk" class="headerlink" title="4. H5调用weixin-sdk"></a>4. H5调用weixin-sdk</h3><ol><li><p>绑定域名</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205200930596.png"></p></li><li><p>加入微信sdk.js</p></li><li><p>通过config接口注入权限验证配置 config接口的参数来自用户对我们个人服务器发送请求返回对应对config参数给前端、</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">config</span>(&#123;<br>  <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br>  <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，公众号的唯一标识</span><br>  <span class="hljs-attr">timestamp</span>: , <span class="hljs-comment">// 必填，生成签名的时间戳</span><br>  <span class="hljs-attr">nonceStr</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，生成签名的随机串</span><br>  <span class="hljs-attr">signature</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 必填，签名</span><br>  <span class="hljs-attr">jsApiList</span>: [] <span class="hljs-comment">// 必填，需要使用的JS接口列表</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>什么是config参数？发送什么请求？</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62"></a><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps&#x2F;JS-SDK.html#62</a></p></li><li><p>使用ready接口处理成功验证</p></li><li><p>使用error接口处理失败验证</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP的握手</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/HTTP%E7%9A%84%E6%8F%A1%E6%89%8B/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/HTTP%E7%9A%84%E6%8F%A1%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<ul><li>客户端使用https的url访问web服务器,要求与服务器建立<strong>ssl连接</strong></li><li>web服务器收到客户端请求后, 会将网站的证书(包含&#x3D;&#x3D;公钥&#x3D;&#x3D;)传送一份给客户端</li><li>客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个秘钥</li><li>客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的私钥解密出会话秘钥</li><li>之后服务器与客户端使用秘钥加密传输</li></ul><p><strong>HTTPS 握手过程中，客户端如何验证证书的合法性</strong></p><ul><li>首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验。</li><li>浏览器开始查找操作系统中已内置的受信任的证书发布机构 CA，与服务器发来的证书中的颁发者 CA 比对，用于校验证书是否为合法机构颁发。</li><li>如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。如果找到，那么浏览器就会从操作系统中取出颁发者 CA 的公钥，然后对服务器发来的证书里面的签名进行解密。</li><li>浏览器使用相同的 Hash 算法根据证书内容计算出信息摘要，将这个计算的值与证书解密的值做对比。</li><li>对比结果一致，则证明服务器发来的证书合法，没有被冒充。此时浏览器就可以读取证书中的公钥，用于后续加密了。</li></ul><p><img src="/:/ef6fa13262a94187912c8973beaa47ee" alt="b94cf07dde7567f0d4063d24d706f150.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的性能优化</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/Vue/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<ul><li>不要在模板里面写过多表达式</li><li>循环调用子组件时添加key</li><li>频繁切换的使用v-show，不频繁切换的使用v-if</li><li>尽量少用float，可以用flex</li><li>按需加载，可以用require或者import()按需加载需要的组件</li><li>路由懒加载</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue 性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖与节流</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map的使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%8A%80%E5%B7%A7%E6%93%8D%E4%BD%9C/map%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%8A%80%E5%B7%A7%E6%93%8D%E4%BD%9C/map%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h1><p>原文地址：<a href="http://www.cnblogs.com/lengyuehuahun/p/5642807.html">http://www.cnblogs.com/lengyuehuahun/p/5642807.html</a></p><p>今天在地铁上看到这样一个小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>].<span class="hljs-title function_">map</span>(<span class="hljs-built_in">parseInt</span>);<br></code></pre></td></tr></table></figure><p>　　相信很多人和我一样，觉得输出的结果是[1,2,3]。no!no!!no!!!正确的答案是[1,NaN,NaN]。当时我百思不得其解，于是到了公司之后就开始查阅资料，终于弄明白了。</p><p>　　我们先来介绍一下map()方法：</p><p>　　概述：</p><p>　　map()方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组，它不会改变原来的数组。</p><p>　　语法：</p><p>　　array.map(callback[, thisArg])</p><p>　　参数：</p><p>　　callback</p><p>　　　　原数组中的元素调用该方法后返回一个新数组。它接收三个参数，分别为 currentValue、index、array。</p><p>　　　　currentValue</p><p>　　　　　　callback的第一个参数，数组中当前被传递的元素。</p><p>　　　　index</p><p>　　　　　　callback的第二个参数，数组中当前被传递的元素的索引。</p><p>　　　　array</p><p>　　　　　　callback的第三个参数，调用map()方法的数组，即原数组。</p><p>　　thisArg</p><p>　　　　执行callback函数时this指向的对象。</p><p>　　描述</p><p>　　　　map()方法会给原数组中的每个元素都按顺序调用一次callback函数。callback每次执行后的返回值组合起来形成一个新的数组。callback函数只会在有值的索引上被调用，那些从来没被赋过值或者使用delete删除的索引则不会被调用。</p><p>　　　　callback函数会被自动传入三个参数：数组元素、数组元素索引、原数组本身。</p><p>　　　　如果thisArg参数有值，则每次调用callback函数时，this都会指向thisArg参数上的这个对象。如果省略了thisArg参数，或者赋值为null或undefined，则this指向全局对象。</p><p>　　　　使用map()方法处理数组时，数组元素的范围是在callback函数第一次被调用之前就确定了。在map()方法执行的过程中：原数组中新增加的元素将不会被callback访问到；若已经存在的元素被改变或删除了，则它们传递到callback的值是map()方法遍历到它们那一时刻的值；而被删除的元素将不会被访问到。</p><p>　　总结</p><p>　　　　通常情况下，map()方法中的callback函数只接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着map只给callback传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p><p>　　兼容旧环境</p><p>　　　　map()方法是在最近的 ECMA-262 标准中新添加的方法；所以一些旧版本的浏览器可能没有实现该方法。在那些没有原生支持 map() 方法的浏览器中，你可以使用下面的 Javascript 代码来<code>实现它。</code>所使用的算法正是 ECMA-262，第 5 版规定的。假定Object、TypeError和 Array 有他们的原始值。而且callback.call的原始值也是 &#96;<a href="https://developer.mozilla.org/zh-cn/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现 ECMA-262, Edition 5, 15.4.4.19</span><br><span class="hljs-comment">// 参考: http://es5.github.com/#x15.4.4.19</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">map</span>) &#123;<br>  <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">callback, thisArg</span>) &#123;<br><br>    <span class="hljs-keyword">var</span> T, A, k;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot; this is null or not defined&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 1. 将O赋值为调用map方法的数组.</span><br>    <span class="hljs-keyword">var</span> O = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br><br>    <span class="hljs-comment">// 2.将len赋值为数组O的长度.</span><br>    <span class="hljs-keyword">var</span> len = O.<span class="hljs-property">length</span> &gt;&gt;&gt; <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 3.如果callback不是函数,则抛出TypeError异常.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(callback) != <span class="hljs-string">&quot;[object Function]&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(callback + <span class="hljs-string">&quot; is not a function&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 如果参数thisArg有值,则将T赋值为thisArg;否则T为undefined.</span><br>    <span class="hljs-keyword">if</span> (thisArg) &#123;<br>      T = thisArg;<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 创建新数组A,长度为原数组O长度len</span><br>    A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len);<br><br>    <span class="hljs-comment">// 6. 将k赋值为0</span><br>    k = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 7. 当 k &lt; len 时,执行循环.</span><br>    <span class="hljs-keyword">while</span>(k &lt; len) &#123;<br><br>      <span class="hljs-keyword">var</span> kValue, mappedValue;<br><br>      <span class="hljs-comment">//遍历O,k为原数组索引</span><br>      <span class="hljs-keyword">if</span> (k <span class="hljs-keyword">in</span> O) &#123;<br><br>        <span class="hljs-comment">//kValue为索引k对应的值.</span><br>        kValue = O[ k ];<br><br>        <span class="hljs-comment">// 执行callback,this指向T,参数有三个.分别是kValue:值,k:索引,O:原数组.</span><br>        mappedValue = callback.<span class="hljs-title function_">call</span>(T, kValue, k, O);<br><br>        <span class="hljs-comment">// 返回值添加到新数组A中.</span><br>        A[ k ] = mappedValue;<br>      &#125;<br>      <span class="hljs-comment">// k自增1</span><br>      k++;<br>    &#125;<br><br>    <span class="hljs-comment">// 8. 返回新数组A</span><br>    <span class="hljs-keyword">return</span> A;<br>  &#125;;      <br>&#125;<br></code></pre></td></tr></table></figure><p>　　了解了map()方法，现在我们回过头来看看文章开头提到的那个小例子。</p><p>　　通常使用parseInt时，只需要传递一个参数。但实际上，parseInt可以有两个参数，第二个参数是进制数，可以通过语句“alert(parseInt.length) &#x3D;&#x3D;&#x3D; 2”来验证。</p><p>　　map()方法在调用callback函数时，会给它传递三个参数：当前正在遍历的元素、元素索引、原数组本身。第三个参数parseInt会忽视，但第二个参数不会，也就是说，parseInt把传过来的索引值当成进制数来使用，而parseInt的第二个参数的范围为2~36（不包含2但包含36），如果省略该参数或者其值为0，则数字将以10为基数来解析；如果小于2或者大于36，parseInt()将返回NaN，所以最终返回了[1,NaN,NaN]。</p><p>　　实际上，这个小例子可以分解成这样理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-number">0</span>);　　<span class="hljs-comment">//基数为0，以十进制来解析，返回1</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">1</span>)　　<span class="hljs-comment">//基数为1，小于2，返回NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-number">2</span>)　　<span class="hljs-comment">//基数为2，小于2，返回NaN</span><br></code></pre></td></tr></table></figure><p>　　注意：在测试parseInt()方法第二个参数范围的过程中发现，当传入的值为1，基数为2时，也会返回1，这点需要注意一下。</p><p>　　我们再来看一下其他小例子：</p><p>　　1、将数组中的单词转换成复数形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fuzzyPlural</span>(<span class="hljs-params">single</span>)&#123;<br>  <span class="hljs-keyword">var</span> result = single.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/o/g</span>,<span class="hljs-string">&quot;e&quot;</span>);<br>  <span class="hljs-keyword">if</span>(single === <span class="hljs-string">&quot;kangaroo&quot;</span>)&#123;<br>        result += <span class="hljs-string">&quot;se&quot;</span>;<br>    &#125;  <br>  <span class="hljs-keyword">return</span> result;    <br>&#125;<br><br><span class="hljs-keyword">var</span> words = [<span class="hljs-string">&quot;foot&quot;</span>,<span class="hljs-string">&quot;goose&quot;</span>,<span class="hljs-string">&quot;moose&quot;</span>,<span class="hljs-string">&quot;kangaroo&quot;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(words.<span class="hljs-title function_">map</span>(fuzzyPlural));<br><br><span class="hljs-comment">//返回[&quot;feet&quot;,&quot;geese&quot;,&quot;meese&quot;,&quot;kangareese&quot;];</span><br></code></pre></td></tr></table></figure><p>　　2、求数组中每个元素的平方根。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> roots = number.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>); <br><span class="hljs-comment">//返回[1, 2, 3]</span><br></code></pre></td></tr></table></figure><p>　　3、在字符串上使用map方法，实现如何在一个String上使用map方法获取字符串中每个字符所对应的ASCII码组成的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">map</span>; <br><span class="hljs-keyword">var</span> a = map.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;hello world&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123; <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>);&#125;) <br><span class="hljs-comment">//a的值为[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/victoryzn/article/details/77225946">Array.prototype.map()详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>常用开发技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写new</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E6%89%8B%E5%86%99new/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E6%89%8B%E5%86%99new/</url>
    
    <content type="html"><![CDATA[<p>#笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObj</span>(<span class="hljs-params">func, ...args</span>) &#123;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(func.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-keyword">let</span> res = fn.<span class="hljs-title function_">apply</span>(obj, args)<br><span class="hljs-keyword">return</span> res <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? <span class="hljs-attr">res</span>: obj<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包器运行时分析</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%89%93%E5%8C%85%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%86%E6%9E%90/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%89%93%E5%8C%85%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>#工程化</p><h1 id="打包器运行时分析"><a href="#打包器运行时分析" class="headerlink" title="打包器运行时分析"></a>打包器运行时分析</h1><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>目录：</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292222678.png" alt="image-20220529222235641"></p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/sum.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =   sum = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y<br><br><span class="hljs-comment">// src/index.js </span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./sum&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">iife</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">pathinfo</span>: <span class="hljs-string">&#x27;verbose&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打包后的<code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> __webpack_modules__ = ([<br><span class="hljs-comment">/* 0 */</span>,<br><span class="hljs-comment">/* 1 */</span><br><span class="hljs-comment">/*!********************!*\</span><br><span class="hljs-comment">  !*** ./src/sum.js ***!</span><br><span class="hljs-comment">  \********************/</span><br><span class="hljs-comment">/*! unknown exports (runtime-defined) */</span><br><span class="hljs-comment">/*! runtime requirements: module */</span><br><span class="hljs-comment">/*! CommonJS bailout: module.exports is used directly at 1:0-14 */</span><br><span class="hljs-comment">/***/</span> (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =   sum = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y<br><br><span class="hljs-comment">/***/</span> &#125;)<br><span class="hljs-comment">/******/</span> ]);<br><span class="hljs-comment">/************************************************************************/</span><br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// The module cache</span><br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> __webpack_module_cache__ = &#123;&#125;;<br><span class="hljs-comment">/******/</span> <br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// The require function</span><br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// Check if module is in cache</span><br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];<br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (cachedModule !== <span class="hljs-literal">undefined</span>) &#123;<br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> cachedModule.<span class="hljs-property">exports</span>;<br><span class="hljs-comment">/******/</span> &#125;<br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// Create a new module (and put it into the cache)</span><br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = __webpack_module_cache__[moduleId] = &#123;<br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// no module.id needed</span><br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// no module.loaded needed</span><br><span class="hljs-comment">/******/</span> <span class="hljs-attr">exports</span>: &#123;&#125;<br><span class="hljs-comment">/******/</span> &#125;;<br><span class="hljs-comment">/******/</span> <br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// Execute the module function</span><br><span class="hljs-comment">/******/</span> __webpack_modules__[moduleId](<span class="hljs-variable language_">module</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, __webpack_require__);<br><span class="hljs-comment">/******/</span> <br><span class="hljs-comment">/******/</span> <span class="hljs-comment">// Return the exports of the module</span><br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br><span class="hljs-comment">/******/</span> &#125;<br><span class="hljs-comment">/******/</span> <br><span class="hljs-comment">/************************************************************************/</span><br><span class="hljs-keyword">var</span> __webpack_exports__ = &#123;&#125;;<br><span class="hljs-comment">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span><br>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">/*!**********************!*\</span><br><span class="hljs-comment">  !*** ./src/index.js ***!</span><br><span class="hljs-comment">  \**********************/</span><br><span class="hljs-comment">/*! unknown exports (runtime-defined) */</span><br><span class="hljs-comment">/*! runtime requirements: __webpack_require__ */</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-comment">/*! ./sum */</span> <span class="hljs-number">1</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>&#125;)();<br></code></pre></td></tr></table></figure><p><code>webpack</code> 的 runtime，也就是 webpack 最后生成的代码，做了以下三件事:</p><ol><li><code>__webpack_modules__</code>: <strong>维护一个所有模块的数组</strong>。将入口模块解析为 AST，根据 AST 深度优先搜索所有的模块，并构建出这个模块数组。每个模块都由一个包裹函数 <code>(module, module.exports, __webpack_require__)</code> 对模块进行包裹构成。</li><li><code>__webpack_require__(moduleId)</code>: <strong>手动实现加载一个模块</strong>。对已加载过的模块进行缓存，对未加载过的模块，执行 id 定位到 <code>__webpack_modules__</code> 中的包裹函数，执行并返回 <code>module.exports</code>，并<strong>缓存</strong></li><li><code>__webpack_require__(0)</code>: 运行第一个模块，即运行入口模块</li></ol><p>另外，当涉及到多个 chunk 的打包方式中，比如 <code>code spliting</code>，webpack 中会有 <code>jsonp</code> 加载 chunk 的运行时代码。</p><p>对 <code>webpack runtime</code> 做进一步的精简，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> __webpack_modules__ = [<span class="hljs-function">() =&gt;</span> &#123;&#125;];<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">__webpack_require__</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = &#123; <span class="hljs-attr">exports</span>: &#123;&#125; &#125;;<br>  <span class="hljs-keyword">const</span> m = __webpack_modules__[id](<span class="hljs-variable language_">module</span>, __webpack_require__);<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>&#125;;<br><br><span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292227418.png" alt="image-20220529222701377"></p><p>打个断点，运行<code>node main.js</code> 进行代码调试更加好分析代码。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292227086.png" alt="image-20220529222739052"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS优化、提高性能</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/CSS%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/CSS%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    
    <content type="html"><![CDATA[<p>#css  #面试题 </p><ol><li><p>避免过度约束</p></li><li><p>避免后代选择符</p></li><li><p>避免链式选择符</p></li><li><p>使用紧凑的语法</p></li><li><p>避免不必要的命名空间</p></li><li><p>避免不必要的重复</p></li><li><p>最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</p></li><li><p>避免！important，可以选择其他选择器</p></li><li><p>尽可能的精简规则，你可以合并不同类里的重复规则</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reduce、promise配合使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%8A%80%E5%B7%A7%E6%93%8D%E4%BD%9C/reduce%E4%B8%8Epromise/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%8A%80%E5%B7%A7%E6%93%8D%E4%BD%9C/reduce%E4%B8%8Epromise/</url>
    
    <content type="html"><![CDATA[<h1 id="reduce与promise的配合使用"><a href="#reduce与promise的配合使用" class="headerlink" title="reduce与promise的配合使用"></a>reduce与promise的配合使用</h1><p>利用 reduce 实现 Promise 串行执行</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// array是个Promise数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">array</span>) &#123;<br>  array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>    prev.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>      <span class="hljs-title function_">next</span>()<br>    &#125;)<br>  &#125;, <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>())<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>Array.prototype.reduce是个同步方法（在一个事件循环就会完成）</li><li>但这仅仅是在内存快速构造了 Promise 执行队列</li><li><code>Reduce</code> 的作用就是在内存中生成这个队列，而不需要把这个冗余的队列写在代码里！</li></ul><h3 id="更简单的方法"><a href="#更简单的方法" class="headerlink" title="更简单的方法"></a>更简单的方法</h3><p>使用async&#x2F;await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">runPromiseByQueue</span>(<span class="hljs-params">myPromises</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myPromises) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">value</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> 不过要注意，这个思路与 <code>reduce</code> 思路不同之处在于，利用 <code>reduce</code> 的函数整体是个同步函数，自己先执行完毕构造 Promise 队列，然后在内存异步执行；而利用 async&#x2F;await 的函数是利用将自己改造为一个异步函数，等待每一个 Promise 执行完毕。</p></blockquote><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://segmentfault.com/a/1190000016832285">用Reduce实现Promise串行</a></li><li><a href="https://juejin.cn/post/6844903582450319373">使用Array.reduce创建Promise回调链</a></li><li><a href="https://juejin.cn/post/7091486488201805861#heading-0">什么是好的面试题</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>常用开发技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>margin与padding的使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/margin%E5%92%8Cpadding%E5%88%86%E5%88%AB%E9%80%82%E5%90%88%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/margin%E5%92%8Cpadding%E5%88%86%E5%88%AB%E9%80%82%E5%90%88%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>#css  #面试题  #重点</p><p>何时使用margin：</p><ol><li><p>需要在border外侧添加空白</p></li><li><p>空白处不需要背景色</p></li><li><p>上下相连的两个盒子之间的空白，需要相互抵消时。</p></li></ol><p>何时使用padding：</p><ol><li><p>需要在border内侧添加空白</p></li><li><p>空白处需要背景颜色</p></li><li><p>上下相连的两个盒子的空白，希望为两者之和。</p></li></ol><p>兼容性的问题：在IE5 IE6中，为float的盒子指定margin时，左侧的margin可能会变成两倍的宽度。通过改变padding或者指定盒子的display：inline解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上下垂直居中</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E4%B8%8A%E4%B8%8B%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E4%B8%8A%E4%B8%8B%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>#面试题 #css </p><ul><li>定高：margin，position + margin(负值)</li><li>不定高：position + transform，flex，IFC + vertical-align:middle</li></ul><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 定高方案1 */</span><br>.<span class="hljs-property">center</span> &#123;<br>  <span class="hljs-attr">height</span>: 100px;<br>  <span class="hljs-attr">margin</span>: 50px <span class="hljs-number">0</span>;   <br>&#125;<br><span class="hljs-comment">/* 定高方案2 */</span><br>.<span class="hljs-property">center</span> &#123;<br>  <span class="hljs-attr">height</span>: 100px;<br>  <span class="hljs-attr">position</span>: absolute;<br>  <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>%;<br>  margin-<span class="hljs-attr">top</span>: -25px;<br>&#125;<br><span class="hljs-comment">/* 不定高方案1 */</span><br>.<span class="hljs-property">center</span> &#123;<br>  <span class="hljs-attr">position</span>: absolute;<br>  <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>%;<br>  <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(-<span class="hljs-number">50</span>%);<br>&#125;<br><span class="hljs-comment">/* 不定高方案2 */</span><br>.<span class="hljs-property">wrap</span> &#123;<br>  <span class="hljs-attr">display</span>: flex;<br>  align-<span class="hljs-attr">items</span>: center;<br>&#125;<br>.<span class="hljs-property">center</span> &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>&#125;<br><span class="hljs-comment">/* 不定高方案3 */</span><br><span class="hljs-comment">/* 设置 inline-block 则会在外层产生 IFC，高度设为 100% 撑开 wrap 的高度 */</span><br>.<span class="hljs-property">wrap</span>::before &#123;<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>%;<br>  <span class="hljs-attr">display</span>: inline-block;<br>  vertical-<span class="hljs-attr">align</span>: middle;<br>&#125;<br>.<span class="hljs-property">wrap</span> &#123;<br>  text-<span class="hljs-attr">align</span>: center;<br>&#125;<br>.<span class="hljs-property">center</span> &#123;<br>  <span class="hljs-attr">display</span>: inline-block;  <br>  vertical-<span class="hljs-attr">align</span>: middle;<br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844903982960214029" title="掘金">https://juejin.cn/post/6844903982960214029</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪元素中单冒号与双冒号</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>#伪元素  #css </p><ol><li><p>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。</p></li><li><p>::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。<strong>并不存在于dom之中，只存在在页面之中。</strong></p></li></ol><p>:before 和 :after 这两个伪元素，是在<strong>CSS2.1</strong>里新出现的。<strong>起初</strong>，伪元素的前缀使用的是单冒号语法，</p><p><strong>但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承与不可继承的属性</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E5%88%97%E4%B8%BE%E5%87%A0%E4%B8%AAcss%E4%B8%AD%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%92%8C%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E5%88%97%E4%B8%BE%E5%87%A0%E4%B8%AAcss%E4%B8%AD%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%92%8C%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>#面试题 #css </p><ul><li>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align</li><li>所有元素可继承：visibility和cursor。</li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li><li>终端块状元素可继承：text-indent和text-align。</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image&#96;。</li></ul><p><strong>transition和animation的区别</strong></p><blockquote><p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>左右居中方案</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E5%B7%A6%E5%8F%B3%E5%B1%85%E4%B8%AD%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E5%B7%A6%E5%8F%B3%E5%B1%85%E4%B8%AD%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>#css  #面试题 </p><ul><li>行内元素: text-align: center</li><li>定宽块状元素: 左右 margin 值为 auto</li><li>不定宽块状元素: table布局，position + transform</li></ul><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-comment">/* 方案1 */</span><br><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center<br>&#125;<br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline;<br>  <span class="hljs-comment">/* or */</span><br>  <span class="hljs-comment">/* display: inline-block; */</span><br>&#125;<br><span class="hljs-comment">/* 方案2 */</span><br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-comment">/* 方案2 */</span><br><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">position</span>: absulote;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>&#125; <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清除浮动</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>#面试题  #css </p><ol><li>在浮动元素后面添加 clear:both的空 div 元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt; <br></code></pre></td></tr></table></figure><ol start="2"><li>给父元素添加 overflow:hidden 或者 auto 样式，触发BFC</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt; <br><br>.<span class="hljs-property">container</span>&#123;<br>    <span class="hljs-attr">width</span>: 300px;<br>    background-<span class="hljs-attr">color</span>: #aaa;<br>    <span class="hljs-attr">overflow</span>:hidden;<br>    <span class="hljs-attr">zoom</span>:<span class="hljs-number">1</span>;   <span class="hljs-comment">/*IE6*/</span><br>&#125; <br></code></pre></td></tr></table></figure><ol start="3"><li>使用伪元素，也是在元素末尾添加一个点并带有 clear: both 属性的元素实现的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container clearfix&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br>.<span class="hljs-property">clearfix</span>&#123;<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/*IE6*/</span><br>&#125;<br>.<span class="hljs-property">clearfix</span>:after&#123;<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;.&quot;</span>;<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attr">clear</span>: both;<br>    <span class="hljs-attr">display</span>: block;<br>    <span class="hljs-attr">visibility</span>: hidden;<br>&#125; <br></code></pre></td></tr></table></figure></li></ol><blockquote><p>推荐使用第三种方法，不会在页面新增div，文档结构更加清晰</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CSS, 面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS选择器权重</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>#面试题  #css </p><blockquote><p>!important &gt; 内联样式 &#x3D; 外联样式 &gt; ID选择器 &gt; 类选择器 &#x3D; 伪类选择器 &#x3D; 属性选择器 &gt; 元素选择器 &#x3D; 伪元素选择器 &gt; 通配选择器 &#x3D; 后代选择器 &#x3D; 兄弟选择器</p></blockquote><ol><li>属性后面加!import会覆盖页面内任何位置定义的元素样式</li><li>作为style属性写在元素内的样式</li><li>id选择器</li><li>类选择器</li><li>标签选择器</li><li>通配符选择器 ( * )</li><li>浏览器自定义或继承</li></ol><p><strong>同一级别：后写的会覆盖先写的</strong></p><blockquote><p>css选择器的解析原则：选择器定位DOM元素是从右往左的方向，这样可以尽早的过滤掉一些不必要的样式规则和元素</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盒子模型</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/CSS/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>#css  </p><blockquote><p>content（元素内容） + padding（内边距） + border（边框） + margin（外边距）</p></blockquote><p><strong>box-sizing</strong></p><ol><li>content-box: margin+border+padding+width</li><li>border-box:margin+width</li><li>inherit: 继承父盒子的box-sizing</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的reduce的使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/Array%E7%9A%84Reduce/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/Array%E7%9A%84Reduce/</url>
    
    <content type="html"><![CDATA[<p>#JavaScript #数组方法</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</strong></p><p>reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">reduce</span>(callback,[initialValue])<br></code></pre></td></tr></table></figure><ul><li>callback （执行数组中每个值的函数，包含四个参数）<ul><li>previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））</li><li>currentValue （数组中当前被处理的元素）</li><li>index （当前元素在数组中的索引）</li><li>array （调用 reduce 的数组）</li></ul></li><li>initialValue （作为第一次调用 callback 的第一个参数。）</li></ul><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>如果有初始值的话，回调函数就会从数组的第0项开始执行，也就是会执行<code>arr.length</code>次；</p><p>但是如果没有初始值的话，会默认取数组的第0项为初始值，回调函数会从数组的第1项开始执行，也就是会执行<code>arr.length - 1</code>次。</p><h1 id="手写reduce"><a href="#手写reduce" class="headerlink" title="手写reduce"></a>手写reduce</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyReduce</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, initialValue</span>) &#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">var</span> pre, startIndex;<br>  pre = initialValue ? initialValue : arr[<span class="hljs-number">0</span>];<br>  startIndex = initialValue ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = startIndex; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    pre = fn.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, pre, arr[i], i, <span class="hljs-variable language_">this</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> pre<br>&#125;<br><br></code></pre></td></tr></table></figure><p>过程分析：</p><ul><li>首先，<code>map、reduce</code>这种方法都是数组原型对象上的方法，所以我将<code>MyReduce</code>定义在<code>Array.prototype</code> 上，这样你就可以直接使用<code>ary.MyReduce()</code>这样的方式调用它了(<code>ary是一个类似于这样的数组[1, 2, 3]</code>)。</li><li>对于参数，我们参考原生<code>reduce</code>，它接收的第一个参数是一个回调函数，第二个是初始值</li><li>而<code>var arr = ...</code>的作用是获取调用<code>MyReduce</code>函数的那个变量，也就是说<code>this</code>会指向那个变量，例如<code>ary.MyReduce()</code>，那么此时<code>this</code>就为<code>ary</code>。</li><li>至于为什么不使用<code>var arr = this;</code>的方式而是使用<code>Array.prototype.slice.call(this)</code>，算是实现一个浅拷贝吧，因为<code>reduce</code>是不会改变原数组的。</li><li>然后就是定义传入<code>reduce</code>中的回调函数的第一个参数<code>pre</code>，也就是上一次运行结果的返回值，可以看到这里就用到了初始值<code>initialValue</code>，如果存在初始值就取初始值，不存在则默认取数组第<code>0</code>项。(当然这里直接用<code>initialValue ?</code>来判断存不存在并不准确，因为我们知道<code>0</code>也会被判断为<code>false</code>)</li><li>接着是定义循环开始的下标<code>startIndex</code>，若是不存在初始值，则初始值是会取数组中的第<code>0</code>项的，相当于第<code>0</code>项并不需要运行，所以<code>startIndex</code>会是<code>1</code>，而如果有初始值的话则需要将数组的每一项都经过<code>fn</code>运行一下。</li><li>最后，<code>for</code>循环中使用<code>fn.call()</code>来调用<code>fn</code>函数，并且最后一个参数是要把原来的数组传递到回调函数中，也就是这里的<code>this</code>。</li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p><code>array.reduce</code> 遍历并将当前次回调函数的返回值作为下一次回调函数执行的第一个参数。</p><p>利用 <code>array.reduce</code> 替代一些需要多次遍历的场景，可以极大提高代码运行效率。</p><ol><li>利用<code>reduce</code> 输出一个数字&#x2F;字符串</li></ol><p>假如有如下每个元素都由字母’s’加数字组成的数组<code>arr</code>，现在找出其中最大的数字：（<code>arr</code>不为空）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;s0&#x27;</span>, <span class="hljs-string">&#x27;s4&#x27;</span>, <span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;s2&#x27;</span>, <span class="hljs-string">&#x27;s8&#x27;</span>, <span class="hljs-string">&#x27;s3&#x27;</span>]<br><br><span class="hljs-comment">// 方法1  进行了多次遍历，低效</span><br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>)).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title class_">Number</span>(item))<br><span class="hljs-keyword">const</span> maxS = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...newArr)<br><br><span class="hljs-comment">// 方法2  一次遍历</span><br><span class="hljs-keyword">const</span> maxS = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> curIndex = <span class="hljs-title class_">Number</span>(cur.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br>  <span class="hljs-keyword">return</span> curIndex &gt; prev ? curIndex : prev<br>&#125;, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>利用<code>reduce</code> 输出一个数组&#x2F;对象</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br> <span class="hljs-comment">// 方法1  遍历了两次，效率低</span><br><span class="hljs-keyword">const</span> value = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123; <span class="hljs-attr">value</span>: item &#125;))<br><br><span class="hljs-comment">// 方法1  一次遍历，效率高</span><br><span class="hljs-keyword">const</span> value = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, curr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> curr % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? [...prev, &#123; <span class="hljs-attr">value</span>: curr &#125;] : prev<br>&#125;, [])<br></code></pre></td></tr></table></figure><p>掌握了上面两种用法，结合实际需要，就可以用 <code>reduce/reduceRight</code> 实现各种奇巧淫技了。</p><p>实例：利用 <code>reduce</code> 做下面这样的处理来生成想要的 html 字符串：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 后端返回数据</span><br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-string">&#x27;if _ then s9&#x27;</span>: [<br>    <span class="hljs-string">&#x27;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&#x27;</span>,<br>    <span class="hljs-string">&#x27;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&#x27;</span>,<br>    <span class="hljs-string">&#x27;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&#x27;</span><br>    ],<br>  <span class="hljs-string">&#x27;if C then s4&#x27;</span>: [<br>    <span class="hljs-string">&#x27;当有条件时时,结构构件满足要求,要求属于安全性、适用性和耐久性&#x27;</span>,<br>    <span class="hljs-string">&#x27;当有条件时时,住宅结构满足要求,要求属于安全性、适用性和耐久性&#x27;</span><br>  ]<br>&#125;<br><br><span class="hljs-keyword">const</span> ifthens = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(data).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> values = cur[<span class="hljs-number">1</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;prev&#125;</span>&lt;p&gt;<span class="hljs-subst">$&#123;cur&#125;</span>&lt;/p&gt;`</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;prev&#125;</span></span><br><span class="hljs-string">    &lt;li&gt;</span><br><span class="hljs-string">      &lt;p&gt;<span class="hljs-subst">$&#123;cur[<span class="hljs-number">0</span>]&#125;</span>&lt;/p&gt;</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;values&#125;</span></span><br><span class="hljs-string">    &lt;/li&gt;</span><br><span class="hljs-string">  `</span><br>&#125;, <span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">const</span> html = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;ul class=&quot;nlp-notify-body&quot;&gt;</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;ifthens&#125;</span></span><br><span class="hljs-string">  &lt;/ul&gt;</span><br><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><p>生成到html结构如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nlp-notify-body&quot;</span>&gt;</span>            <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>if _ then s9<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>if C then s4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当有条件时时,结构构件满足要求,要求属于安全性、适用性和耐久性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当有条件时时,住宅结构满足要求,要求属于安全性、适用性和耐久性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里还有一个替代 <code>reverse</code> 函数的技巧</p><p>由于 <code>array.reverse()</code> 函数会改变原数组自身，这样就限制了一些使用场景。如果我想要一个不会改变数组自身的 <code>reverse</code> 函数呢？拿走！</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">myReverse</span> = (<span class="hljs-params">arr = []</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span>  arr.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> [...prev, cur], []) <span class="hljs-comment">// 也可以返回逗号表达式 (prev.push(cur), prev)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>reduce</code> 太强大了，这里只能展示基本用法。到底有多强大推荐查看大佬这篇<a href="https://juejin.cn/post/6844904063729926152">《25个你不得不知道的数组reduce高级用法》</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的Array的常用方法</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/Array%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/Array%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>#JavaScript #数组方法 #常用</p><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><p>数组操作首先要注意且牢记<code>splice、sort、reverse</code>这3个常用方法是对数组自身的操作，会改变数组自身。其他会改变自身的方法是增删<code>push/pop/unshift/shift</code>、填充<code>fill</code>和复制填充<code>copyWithin</code></p><p>先献上数组方法懒人图一 （除了<code>Array.keys()/Array.values()/Array.entries()</code>基本都有）</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205191738856.png" alt="常用方法"></p><h3 id="生成类似-1-100-这样的的数组："><a href="#生成类似-1-100-这样的的数组：" class="headerlink" title="生成类似[1-100]这样的的数组："></a>生成类似[1-100]这样的的数组：</h3><p>测试大量数据的数组时可以这样生成：</p><figure class="highlight jsx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// fill</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> index + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// Array.from() 评论区大佬指出</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">Array</span>(<span class="hljs-number">100</span>), <span class="hljs-function">(<span class="hljs-params">v, k</span>) =&gt;</span> k + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// ... + array.keys() 评论区大佬指出 生成的是0-99的数组</span><br><span class="hljs-keyword">const</span> ary = [...<span class="hljs-title class_">Array</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">keys</span>()] <br><br></code></pre></td></tr></table></figure><p><code>new Array(100)</code> 会生成一个有100空位的数组，这个数组是不能被<code>map()，forEach(), filter(), reduce(), every() ，some()</code>遍历的，因为空位会被跳过（<code>for of</code>不会跳过空位，可以遍历）。 <code>[...new Array(4)]</code> 可以给空位设置默认值<code>undefined</code>，从而使数组可以被以上方法遍历。</p><h2 id="数组解构赋值应用"><a href="#数组解构赋值应用" class="headerlink" title="数组解构赋值应用"></a>数组解构赋值应用</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 交换变量</span><br>[a, b] = [b, a]<br>[o.<span class="hljs-property">a</span>, o.<span class="hljs-property">b</span>] = [o.<span class="hljs-property">b</span>, o.<span class="hljs-property">a</span>]<br><span class="hljs-comment">// 生成剩余数组</span><br><span class="hljs-keyword">const</span> [a, ...rest] = [...<span class="hljs-string">&#x27;asdf&#x27;</span>] <span class="hljs-comment">// a：&#x27;a&#x27;，rest: [&quot;s&quot;, &quot;d&quot;, &quot;f&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="数组浅拷贝"><a href="#数组浅拷贝" class="headerlink" title="数组浅拷贝"></a>数组浅拷贝</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> arrClone = [...arr]<br><span class="hljs-comment">// 对象也可以这样浅拷贝</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">const</span> objClone = &#123; ...obj &#125;<br></code></pre></td></tr></table></figure><p>浅拷贝方法有很多如<code>arr.slice(0, arr.length)/Arror.from(arr)</code>等，但是用了<code>...</code>操作符之后就不会再想用其他的了~</p><h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">const</span> arr = [...arr1, ...arr2, ...arr3]<br></code></pre></td></tr></table></figure><p><code>arr1.concat(arr2, arr3)</code>同样可以实现合并，但是用了<code>...</code>操作符之后就不会再想用其他的了~</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> newArr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br></code></pre></td></tr></table></figure><p><code>new Set(arr)</code>接受一个数组参数并生成一个set结构的数据类型。set数据类型的元素不会重复且是<code>Array Iterator</code>，所以可以利用这个特性来去重。</p><h2 id="数组取交集"><a href="#数组取交集" class="headerlink" title="数组取交集"></a>数组取交集</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-keyword">const</span> duplicatedValues = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(a)].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> b.<span class="hljs-title function_">includes</span>(item))<br>duplicatedValues <span class="hljs-comment">// [3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="数据取差集"><a href="#数据取差集" class="headerlink" title="数据取差集"></a>数据取差集</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-keyword">const</span> diffValues = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a, ...b])].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !b.<span class="hljs-title function_">includes</span>(item) || !a.<span class="hljs-title function_">includes</span>(item)) <span class="hljs-comment">// [0, 1, 2, 6, 7, 8]</span><br></code></pre></td></tr></table></figure><h2 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> newObj = &#123;...arr&#125; <span class="hljs-comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4&#125;</span><br><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-number">0</span>: <span class="hljs-number">0</span>, <span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">length</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-comment">// 对象转数组不能用展开操作符，因为展开操作符必须用在可迭代对象上</span><br><span class="hljs-keyword">let</span> newArr = [...obj] <span class="hljs-comment">// Uncaught TypeError: object is not iterable...</span><br><span class="hljs-comment">// 可以使用Array.form()将类数组对象转为数组</span><br><span class="hljs-keyword">let</span> newArr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(obj) <span class="hljs-comment">// [0, 1, 2]</span><br></code></pre></td></tr></table></figure><h2 id="数组摊平"><a href="#数组摊平" class="headerlink" title="数组摊平"></a>数组摊平</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;群主&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;男群友&#x27;</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;女裙友&#x27;</span>, <span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;未知性别&#x27;</span>&#125;<br><span class="hljs-keyword">const</span> getName = <span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123; <span class="hljs-keyword">return</span> item.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;群&#x27;</span>)&#125;<br><span class="hljs-comment">// 方法1</span><br><span class="hljs-keyword">const</span> flatArr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj).<span class="hljs-title function_">flat</span>().<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">getName</span>(item))<br><span class="hljs-comment">// 经大佬指点，更加简化（发现自己的抽象能力真的差~）</span><br><span class="hljs-keyword">const</span> flatArr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj).<span class="hljs-title function_">flat</span>().<span class="hljs-title function_">filter</span>(getName)<br></code></pre></td></tr></table></figure><p>二维数组用<code>array.flat()</code>，三维及以上用<code>array.flatMap()</code>。<code>array.flat(2)</code>可以传参数字如 2，表示要摊平的层数。</p><h1 id="数组常用遍历"><a href="#数组常用遍历" class="headerlink" title="数组常用遍历"></a>数组常用遍历</h1><p>数组常用遍历有 <code>forEach、every、some、filter、map、reduce、reduceRight、find、findIndex</code>等方法，很多方法都可以达到同样的效果。数组方法不仅要会用，而且要用好。要用好就要知道什么时候用什么方法。</p><h2 id="遍历的混合使用"><a href="#遍历的混合使用" class="headerlink" title="遍历的混合使用"></a>遍历的混合使用</h2><p><code>filter</code>、<code>map</code>方法返回值仍旧是一个数组，所以可以搭配其他数组遍历方法混合使用。注意遍历越多效率越低~</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> value = arr<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">3</span>)<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">1</span>)<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, curr</span>) =&gt;</span> prev + curr, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="检测数组所有元素是否都符合判断条件"><a href="#检测数组所有元素是否都符合判断条件" class="headerlink" title="检测数组所有元素是否都符合判断条件"></a>检测数组所有元素是否都符合判断条件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isAllNum = arr.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&#x27;number&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="检测数组是否有元素符合判断条件"><a href="#检测数组是否有元素符合判断条件" class="headerlink" title="检测数组是否有元素符合判断条件"></a>检测数组是否有元素符合判断条件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> hasNum = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&#x27;number&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="找到第一个符合条件的元素-x2F-下标"><a href="#找到第一个符合条件的元素-x2F-下标" class="headerlink" title="找到第一个符合条件的元素&#x2F;下标"></a>找到第一个符合条件的元素&#x2F;下标</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> findItem = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">3</span>) <span class="hljs-comment">// 返回子项</span><br><span class="hljs-keyword">const</span> findIndex = arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">3</span>) <span class="hljs-comment">// 返回子项的下标</span><br><br><span class="hljs-comment">// 我以后再也不想看见下面这样的代码了😂</span><br><span class="hljs-keyword">let</span> findIndex<br>arr.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item === <span class="hljs-number">3</span>) &#123;<br>        findIndex = index<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="数组使用误区"><a href="#数组使用误区" class="headerlink" title="数组使用误区"></a>数组使用误区</h2><p>数组的方法很多，很多方法都可以达到同样的效果，所以在使用时要根据需求使用合适的方法。</p><p>垃圾代码产生的很大原因就是数组常用方法使用不当，这里有以下需要注意的点</p><h2 id="array-includes-和-array-indexOf"><a href="#array-includes-和-array-indexOf" class="headerlink" title="array.includes() 和 array.indexOf()"></a>array.includes() 和 array.indexOf()</h2><p><code>array.includes()</code> 返回布尔值，<code>array.indexOf()</code> 返回数组子项的索引。<code>indexOf</code> 一定要在需要索引值的情况下使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-comment">// 使用indexOf，需要用到索引值</span><br><span class="hljs-keyword">const</span> index = arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">if</span> (~index) &#123; <span class="hljs-comment">// 若index === -1，~index得到0，判断不成立；若index不为-1，则~index得到非0，判断成立。</span><br>    arr.<span class="hljs-title function_">spilce</span>(index, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用includes，不需要用到索引值</span><br><span class="hljs-comment">// 此时若用indexOf会造成上下文上的阅读负担：到底其他地方有没有用到这个index?</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">6</span>) <span class="hljs-comment">// true</span><br><span class="hljs-keyword">if</span> (!isExist) &#123;<br>    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">6</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>另外评论区大佬指出，<code>array.indexOf()</code>找 <code>NaN</code> 会找不到，返回<code>-1</code>，<code>array.includes()</code>能找到，返回<code>true</code>~</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[<span class="hljs-title class_">NaN</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br>[<span class="hljs-title class_">NaN</span>].<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p><strong>array.find() 、 array.findIndex() 和 array.some()</strong></p><p><code>array.find()</code>返回值是第一个符合条件的数组子项，<code>array.findIndex()</code> 返回第一个符合条件的数组子项的下标，<code>array.some()</code> 返回有无复合条件的子项，如有返回<code>true</code>，若无返回<code>false</code>。注意这三个都是短路操作，即找到符合条件的之后就不在继续遍历。</p><p>在需要数组的子项的时候使用<code>array.find()</code>；需要子项的索引值的时候使用 <code>array.findIndex()</code>；而若只需要知道有无符合条件的子项，则用 <code>array.some()</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [&#123;<span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;不男不女&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>&#125;]<br><br><span class="hljs-comment">// 使用some</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">value</span> === <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> (isExist) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;哈哈哈找到了&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用find</span><br><span class="hljs-keyword">const</span> item = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">value</span> === <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> (item) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item.<span class="hljs-property">label</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用findIndex</span><br><span class="hljs-keyword">const</span> index = arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">value</span> === <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> (~index) &#123;<br>    <span class="hljs-keyword">const</span> delItem = arr[index]<br>    arr.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你删除了<span class="hljs-subst">$&#123;delItem.label&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>建议在只需要布尔值的时候和数组子项是字符串或数字的时候使用 <code>array.some():</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 当子包含数字0的时候可能出错</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> (isExist) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;存在要找的子项，很舒服~&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> (isExist) &#123; <span class="hljs-comment">// isExist此时是0，隐式转换为布尔值后是false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行不到这里~&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 当子项包含空字符串的时候也可能出错</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;asdf&#x27;</span>, <span class="hljs-string">&#x27;qwer&#x27;</span>, <span class="hljs-string">&#x27;...&#x27;</span>]<br><br><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">if</span> (isExist) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;存在要找的子项，很舒服~&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">const</span> isExist = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">if</span> (isExist) &#123; <span class="hljs-comment">// isExist此时是&#x27;&#x27;，隐式转换为布尔值后是false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行不到这里~&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="array-find-和-array-filter"><a href="#array-find-和-array-filter" class="headerlink" title="array.find() 和 array.filter()"></a>array.find() 和 array.filter()</h2><p>只需要知道 <code>array.filter()</code> 返回的是所有符合条件的子项组成的数组，会遍历所有数组；而 <code>array.find()</code> 只返回第一个符合条件的子项，是短路操作。不再举例~</p><h2 id="合理使用-Set-数据结构"><a href="#合理使用-Set-数据结构" class="headerlink" title="合理使用 Set 数据结构"></a>合理使用 Set 数据结构</h2><p>由于 es6 原生提供了 <code>Set</code> 数据结构，而 <code>Set</code> 可以保证子项不重复，且和数组转换十分方便，所以在一些可能会涉及重复添加的场景下可以直接使用 <code>Set</code>代替 <code>Array</code>，避免了多个地方重复判断是否已经存在该子项。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)<br>set.<span class="hljs-property">size</span> <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">const</span> arr = [...set] <span class="hljs-comment">// arr: [1]</span><br></code></pre></td></tr></table></figure><p>[[Array的Reduce#应用]]</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型与原型链</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>#原型链</p><h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><p>除了基本对象（base Object），所有对象都有原型</p><h2 id="proto-和prototype关系："><a href="#proto-和prototype关系：" class="headerlink" title="__proto__和prototype关系："></a><code>__proto__</code>和prototype关系：</h2><ul><li><p><code>__proto__</code>和constructor是对象独有的。</p></li><li><p>prototype属性是函数独有的</p></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对象（也就是它的原型），这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部将包含一个指针（<code>__proto__</code>），这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们是不应该能够获取到这个值的，但是现在浏览器中都实现了<code>__proto__</code> 属性来让我们访问这个属性，但是我们最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对象的原型。</p></blockquote><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是我们新建的对象为什么能够使用 toString() 等方法的原因。</p><blockquote><p>特点：JavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与 之相关的对象也会继承这一改变</p></blockquote><h2 id="原型、构造函数、实例"><a href="#原型、构造函数、实例" class="headerlink" title="原型、构造函数、实例"></a>原型、构造函数、实例</h2><ul><li>原型(prototype): 一个简单的对象，用于实现对象的 属性继承。可以简单的理解成对象的爹。在 Firefox 和 Chrome 中，每个JavaScript对象中都包含一个<code>__proto__</code>(非标准)的属性指向它爹(该对象的原型)，可obj.<code>__proto__</code>进行访问。</li><li>构造函数: 可以通过new来 新建一个对象 的函数。</li><li>实例: 通过构造函数和new创建出来的对象，便是实例。 实例通过<code>__proto__</code>指向原型，通过constructor指向构造函数。</li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>以Object为例，我们常用的Object便是一个构造函数，因此我们可以通过它构建实例。</p><figure class="highlight dart"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 实例</span><br><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>() <br></code></pre></td></tr></table></figure><blockquote><p>则此时， 实例为instance, 构造函数为Object，我们知道，构造函数拥有一个prototype的属性指向原型，因此原型为:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原型</span><br><span class="hljs-keyword">const</span> prototype = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <br></code></pre></td></tr></table></figure><h2 id="三者关系-x3D-gt"><a href="#三者关系-x3D-gt" class="headerlink" title="三者关系 &#x3D;&gt;"></a>三者关系 &#x3D;&gt;</h2><p>这里我们可以来看出三者的关系:</p><ul><li>实例.<code>__proto__</code> &#x3D;&#x3D;&#x3D; 原型</li><li>原型.constructor &#x3D;&#x3D;&#x3D; 构造函数</li><li>构造函数.prototype &#x3D;&#x3D;&#x3D; 原型</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 这条线其实是是基于原型进行获取的，可以理解成一条基于原型的映射线<br><span class="hljs-regexp">//</span> 例如: <br><span class="hljs-regexp">//</span> const o = new Object()<br><span class="hljs-regexp">//</span> o.constructor === Object   --&gt; true<br><span class="hljs-regexp">//</span> o.__proto__ = null;<br><span class="hljs-regexp">//</span> o.constructor === Object   --&gt; false<br>实例.constructor === 构造函数 <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301622964.png" alt="49a2411d33c4ff8d57c520010a1a2e82.png"></p><h2 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>原型链是由原型对象组成，每个对象都有<code>__proto__</code>属性，指向了创建该对象的构造函数的原型，<code>__proto__</code> 将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链</p></blockquote><ul><li>属性查找机制: 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象Object.prototype，如还是没找到，则输出undefined；</li><li>属性修改机制: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: b.prototype.x &#x3D; 2；但是这样会造成所有继承于该对象的实例的属性发生改变。</li></ul><p>js 获取原型的方法</p><ul><li>p.<code>__proto__</code></li><li>p.constructor.prototype</li><li>Object.getPrototypeOf§</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301622970.png" alt="76bb94e3e609fdb92550ef36b62c5aab.png"></p><ul><li>每个函数都有 prototype 属性，除了 Function.prototype.bind()，该属性指向原型。</li><li>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]]是内部属性，我们并不能访问到，所以使用 <code>_proto_</code>来访问</li><li>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScirpt的预处理</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/JS%E5%87%BD%E6%95%B0%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/JS%E5%87%BD%E6%95%B0%E9%A2%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>#JavaScript  #面试题 </p><p>函数的预处理和全局的预处理大致一致，区别在于函数有参数。（变量提升）</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//4</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//函数的引用</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">//报错</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<span class="hljs-comment">//undefined</span><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-comment">//......</span><br>   &#125;<br>   c = <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">var</span> d = <span class="hljs-number">3</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//1</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//函数的引用</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">//2</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<span class="hljs-comment">//3</span><br>&#125;<br><span class="hljs-title function_">test</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>当函数运行到“test(4,5)”时进入到test函数，此时创建再增加一个新的执行环境，进行预处理得到LE：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">LE</span>&#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-number">4</span>,<br>  <span class="hljs-attr">b</span>:函数的引用,<br>  <span class="hljs-attr">d</span>:<span class="hljs-literal">undefined</span>,<br>  <span class="hljs-comment">/*arguments表示参数的长度*/</span><br>  <span class="hljs-attr">arguments</span>:<span class="hljs-number">2</span><br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：</p></blockquote><p>当函数内定义的值&#x3D;&#x3D;var a&#x3D;&#x3D;和函数的参数列表中&#x3D;&#x3D;a&#x3D;&#x3D;有同名的话，变量提升(函数预处理)后，会将参数的实参赋值到&#x3D;&#x3D;形参a&#x3D;&#x3D;中，若与非匿名自执行函数同名，&#x3D;&#x3D;var a&#x3D;&#x3D;会覆盖，但是&#x3D;&#x3D;a&#x3D;&#x3D;不能覆盖，且不能修改，因为这个变量是只读的状态。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的闭包</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E9%97%AD%E5%8C%85/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>#JavaScript  #闭包 #面试题 </p><blockquote><p>闭包其实就是一个可以访问其他函数内部变量的函数。创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以 访问到当前函数的局部变量。</p></blockquote><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205201423926.png" alt="闭包的本质"></p><p>因为通常情况下，函数内部变量是无法在外部访问的（即全局变量和局部变量的区别），因此使用闭包的作用，就具备实现了能在外部访问某个函数内部变量的功能，让这些内部变量的值始终可以保存在内存中。下面我们通过代码先来看一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;;<br>&#125;<br><span class="hljs-title function_">fun1</span>();<br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">fun1</span>();<br><span class="hljs-title function_">result</span>();  <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// 结合闭包的概念，我们把这段代码放到控制台执行一下，就可以发现最后输出的结果是 1（即 a 变量的值）。那么可以很清楚地发现，a 变量作为一个 fun1 函数的内部变量，正常情况下作为函数内的局部变量，是无法被外部访问到的。但是通过闭包，我们最后还是可以拿到 a 变量的值 </span><br></code></pre></td></tr></table></figure><h3 id="闭包有两个常用的用途"><a href="#闭包有两个常用的用途" class="headerlink" title="闭包有两个常用的用途"></a>闭包有两个常用的用途</h3><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul><blockquote><p>其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-comment">// fn 是闭包</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 这里也是闭包</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-title function_">fn1</span>()<br><span class="hljs-title function_">fn2</span>() <br></code></pre></td></tr></table></figure><ul><li>大家都知道闭包其中一个作用是访问私有变量，就比如上述代码中的 fn2 访问到了 fn1 函数中的变量 a。但是此时 fn1 早已销毁，<strong>我们是如何访问到变量 a 的呢？不是都说原始类型是存放在栈上的么，为什么此时却没有被销毁掉？</strong></li><li>接下来笔者会根据浏览器的表现来重新理解关于原始类型存放位置的说法。</li><li>先来说下数据存放的正确规则是：局部、占用空间确定的数据，一般会存放在栈中，否则就在堆中（也有例外）。 那么接下来我们可以通过 Chrome 来帮助我们验证这个说法说法。<br><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205201424177.png"></li></ul><blockquote><p>上图中画红框的位置我们能看到一个内部的对象 [[Scopes]]，其中存放着变量 a，该对象是被存放在堆上的，其中包含了闭包、全局对象等等内容，因此我们能通过闭包访问到本该销毁的变量。</p></blockquote><p>另外最开始我们对于闭包的定位是：假如一个函数能访问外部的变量，那么这个函数它就是一个闭包，因此接下来我们看看在全局下的表现是怎么样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br><span class="hljs-comment">// fn 是闭包</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b);<br>&#125; <br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205201426312.png"></p><p>从上图我们能发现全局下声明的变量，<strong>如果是 var 的话就直接被挂到 globe 上</strong>，<strong>如果是其他关键字声明的话就被挂到 Script 上</strong>。虽然这些内容同样还是存在 [[Scopes]]，但是全局变量应该是存放在静态区域的，因为全局变量无需进行垃圾回收，等需要回收的时候整个应用都没了。</p><h3 id="闭包产生的原因"><a href="#闭包产生的原因" class="headerlink" title="闭包产生的原因"></a>闭包产生的原因</h3><blockquote><p>我们在前面介绍了作用域的概念，那么你还需要明白作用域链的基本概念。其实很简单，当访问一个变量时，代码解释器会首先在当前的作用域查找，如果没找到，就去父级作用域去查找，直到找到该变量或者不存在父级作用域中，这样的链路就是作用域链</p></blockquote><p>需要注意的是，每一个子函数都会拷贝上级的作用域，形成一个作用域的链条。那么我们还是通过下面的代码来详细说明一下作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//3</span><br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>从中可以看出，fun1 函数的作用域指向全局作用域（window）和它自己本身；fun2 函数的作用域指向全局作用域 （window）、fun1 和它本身；而作用域是从最底层向上找，直到找到全局作用域 window 为止，如果全局还没有的话就会报错。</li><li>那么这就很形象地说明了什么是作用域链，即当前函数一般都会存在上层函数的作用域的引用，那么他们就形成了一条作用域链。</li><li><strong>由此可见，闭包产生的本质就是：当前环境中存在指向父级作用域的引用。那么还是拿上的代码举例。</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">//2</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> fun2;<br>&#125;<br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">fun1</span>();<br><span class="hljs-title function_">result</span>(); <br></code></pre></td></tr></table></figure><ul><li>从上面这段代码可以看出，这里 result 会拿到父级作用域中的变量，输出 2。因为在当前环境中，含有对 fun2 函数的引用，fun2 函数恰恰引用了 window、fun1 和 fun2 的作用域。因此 fun2 函数是可以访问到 fun1 函数的作用域的变量。</li><li>那是不是只有返回函数才算是产生了闭包呢？其实也不是，回到闭包的本质，我们只需要让父级作用域的引用存在即可，因此还可以这么改代码，如下所示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun3;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  fun3 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  &#125;<br>&#125;<br><span class="hljs-title function_">fun1</span>();<br><span class="hljs-title function_">fun3</span>(); <br></code></pre></td></tr></table></figure><blockquote><p>可以看出，其中实现的结果和前一段代码的效果其实是一样的，就是在给 fun3 函数赋值后，fun3 函数就拥有了 window、fun1 和 fun3 本身这几个作用域的访问权限；然后还是从下往上查找，直到找到 fun1 的作用域中存在 a 这个变量；因此输出的结果还是 2，最后产生了闭包，形式变了，本质没有改变。</p></blockquote><p>因此<strong>最后返回的不管是不是函数，也都不能说明没有产生闭包</strong></p><h2 id="闭包的表现形式"><a href="#闭包的表现形式" class="headerlink" title="闭包的表现形式"></a>闭包的表现形式</h2><ol><li>返回一个函数</li><li>在定时器、事件监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。请看下面这段代码，这些都是平常开发中用到的形式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定时器</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>&#125;，<span class="hljs-number">1000</span>);<br><span class="hljs-comment">// 事件监听</span><br>$(<span class="hljs-string">&#x27;#app&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Event Listener&#x27;</span>);<br>&#125;); <br></code></pre></td></tr></table></figure><ol start="3"><li>作为函数参数传递的形式，比如下面的例子。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  &#125;<br>  <span class="hljs-title function_">bar</span>(baz);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">fn</span>)&#123;<br>  <span class="hljs-comment">// 这就是闭包</span><br>  <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-title function_">foo</span>();  <span class="hljs-comment">// 输出2，而不是1 </span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>IIFE（立即执行函数）</strong>，创建了闭包，保存了全局作用域（window）和当前函数的作用域，因此可以输出全局的变量，如下所示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">IIFE</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">// 输出2</span><br>&#125;)(); <br></code></pre></td></tr></table></figure><blockquote><p>IIFE 这个函数会稍微有些特殊，算是一种自执行匿名函数，这个匿名函数拥有独立的作用域。这不仅可以避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域，我们经常能在高级的 JavaScript 编程中看见此类函数。</p></blockquote><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>如何解决循环输出问题？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i ++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;, <span class="hljs-number">0</span>)<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>上面这段代码执行之后，从控制台执行的结果可以看出来，结果输出的是 5 个 6，那么一般面试官都会先问为什么都是 6？我想让你实现输出 1、2、3、4、5 的话怎么办呢？</p></blockquote><p>因此结合本讲所学的知识我们来思考一下，应该怎么给面试官一个满意的解释。你可以围绕这两点来回答。</p><ul><li>setTimeout 为宏任务，由于 JS 中单线程 eventLoop 机制，在主线程同步任务执行完后才去执行宏任务，因此循环结束后 setTimeout 中的回调才依次执行</li><li>因为 setTimeout 函数也是一种闭包，往上找它的父级作用域链就是 window，变量 i 为 window 上的全局变量，开始执行 setTimeout 之前变量 i 已经就是 6 了，因此最后输出的连续就都是 6。</li></ul><blockquote><p>那么我们再来看看如何按顺序依次输出 1、2、3、4、5 呢？</p></blockquote><ol><li>利用 IIFE</li></ol><blockquote><p>可以利用 IIFE（立即执行函数），当每次 for 循环时，把此时的变量 i 传递到定时器中，然后执行，改造之后的代码如下。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>    &#125;, <span class="hljs-number">0</span>)<br>  &#125;)(i)<br>&#125; <br></code></pre></td></tr></table></figure><ol start="2"><li>使用 ES6 中的 let</li></ol><blockquote><p>ES6 中新增的 let 定义变量的方式，使得 ES6 之后 JS 发生革命性的变化，让 JS 有了块级作用域，&#x3D;&#x3D;代码的作用域以块级为单位进行执行&#x3D;&#x3D;。通过改造后的代码，可以实现上面想要的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125; <br></code></pre></td></tr></table></figure><ol start="3"><li>定时器传入第三个参数</li></ol><blockquote><p>setTimeout 作为经常使用的定时器，&#x3D;&#x3D;它是存在第三个参数的&#x3D;&#x3D;，日常工作中我们经常使用的一般是前两个，一个是回调函数，另外一个是时间，而第三个参数用得比较少。那么结合第三个参数，调整完之后的代码如下。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>  &#125;, <span class="hljs-number">0</span>, i)<br>&#125; <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;从中可以看到，第三个参数的传递，可以改变 setTimeout 的执行逻辑，从而实现我们想要的结果，这也是一种解决循环输出问题的途径&#x3D;&#x3D;</p><h3 id="常见考点"><a href="#常见考点" class="headerlink" title="常见考点"></a>常见考点</h3><ul><li>闭包能考的很多，概念和笔试题都会考。</li><li>概念题就是考考闭包是什么了。</li><li>笔试题的话基本都会结合上异步，比如最常见的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;)<br>&#125; <br></code></pre></td></tr></table></figure><p>这道题会问输出什么，有哪几种方式可以得到想要的答案？</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构造函数、对象实例、原型的关系</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>#构造函数、原型对象和实例之间的关系</p><h1 id="构造函数、对象实例、原型的关系"><a href="#构造函数、对象实例、原型的关系" class="headerlink" title="构造函数、对象实例、原型的关系"></a>构造函数、对象实例、原型的关系</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>利用构造函数创建对象时，注意两点：</p><ul><li>构造函数用于创建对象时，函数名首字母大写</li><li>构造函数要和new一起用才有意义</li></ul><p><strong>new在执行时会做四件事情：</strong></p><ol><li><p>在内存中创建一个空的对象</p></li><li><p>让this指向这个新的对象</p></li><li><p>执行构造函数里面的代码，给这个新对象添加属性和方法</p></li><li><p>返回这个新对象（所以构造函数里面不要return）</p></li></ol><p>利用构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">name,age</span>)&#123; <br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name,<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age,<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我打球贼厉害&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">James</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;詹姆斯&#x27;</span>，<span class="hljs-number">37</span>);<br></code></pre></td></tr></table></figure><h3 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h3><blockquote><p> <strong>静态成员：在构造函数上添加的成员，只能由构造函数本身来访问。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">name,age</span>)&#123; <br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name,<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age,<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我打球贼厉害&#x27;</span>)<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Star</span>.<span class="hljs-property">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Star</span>.<span class="hljs-property">sex</span>)<span class="hljs-comment">//男</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">James</span>.<span class="hljs-property">sex</span>)<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p> 这个可以类比Java的静态变量</p></blockquote><blockquote><p> <strong>实例成员：在构造函数内部创建（this添加）的对象的成员，只能由实例化对象来访问。</strong></p></blockquote><p>这里的name,age,play就是实例成员 play应该称为实例方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">James</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//詹姆斯</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Star</span>.<span class="hljs-property">name</span>)<span class="hljs-comment">//undefined </span><br></code></pre></td></tr></table></figure><h3 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象共享的。</p><p>JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。注意这里的prototype就是一个对象，这个对象所有的属性和方法，都会被构造函数所拥有。</p><p>打印个实例对象</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301607314.png" alt="image-20220530160724265"></p><p>原型prototype是个对象。</p><p>那prototype有啥用呢？我们可以把那些不变的方法，直接定义在prototype原型上，这样所有对象的实例就可以共享这些方法，这样就可以避免内存浪费的问题，比如我再通过new Star()去实例一个新的对象，新的对象也会有paly方法，由于函数属于复杂数据类型，这样内存就又会开辟空间去存储这个函数，这样就会造成内存浪费。</p><h3 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型__proto__"></a>对象原型<code>__proto__</code></h3><p>对象都会有一个__proto__属性，<em>指向构造函数的prototype原型对象上</em>，之所以对象可以使用构造函数的prototype原型对象上的属性和方法，就是因为有__proto__原型的存在。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301613876.png" alt="image-20220530161348840"></p><h4 id="方法的查找原则："><a href="#方法的查找原则：" class="headerlink" title="方法的查找原则："></a>方法的查找原则：</h4><p>首先先看<code>a</code>这个对象身上是否有<code>play</code>方法，如果有就执行，如果没有，因为有<code>__proto__</code>的存在，就去构造函数原型对象prototype身上去查找play这个方法，有就执行。</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><code>__proto__</code>对象原型和原型对象 prototype是等价的 <strong>proto</strong></p><p>对象原型的意义就在于为对象的查找机制提供一个方向,或者说一条路线,但是它是一个非标准属性, 因此实际开发中,不可以使用这个属性,它只是内部指向原型对象prototype </p><p>对象原型(<strong>proto</strong>) 和构造函数( prototype )原型对象里面都有一个属性 constructor属性, constructor 我们称为构造函数,因为它指回构造函数本身。 constructor主要用于记录该对象引|用于哪个构造函数,它可以让原型对象重新指向原来的构造函数。 </p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301620177.awebp" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ts的编译</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/TypeScript/%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/TypeScript/%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>#TypeScript</p><h1 id="编译和打包"><a href="#编译和打包" class="headerlink" title="编译和打包"></a>编译和打包</h1><p><a href="https://juejin.cn/post/7016635784631418916">编译和打包</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite的使用</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Vite/vite%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Vite/vite%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>#vite #打包器</p><h1 id="vite-config-js"><a href="#vite-config-js" class="headerlink" title="vite.config.js"></a>vite.config.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span> <span class="hljs-comment">// 帮手函数，这样不用 jsdoc 注解也可以获取类型提示</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">import</span> &#123; viteMockServe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-plugin-mock&quot;</span><br><br><span class="hljs-keyword">const</span> localEnabled = process.<span class="hljs-property">env</span>.<span class="hljs-property">USE_MOCK</span> || <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">const</span> prodEnabled = process.<span class="hljs-property">env</span>.<span class="hljs-property">USE_CHUNK_MOCK</span> || <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; <span class="hljs-title function_">defineConfig</span>(&#123;<br> <span class="hljs-attr">plugins</span>: [ <span class="hljs-comment">//配置需要使用的插件列表</span><br>  <span class="hljs-title function_">vue</span>(),<br>  <span class="hljs-title function_">viteMockServe</span>(&#123;<br>   <span class="hljs-attr">mockPath</span>: <span class="hljs-string">&quot;./src/server/mock&quot;</span>,<br>   <span class="hljs-attr">localEnabled</span>: localEnabled, <span class="hljs-comment">// 开发打包开关 true时打开mock  false关闭mock</span><br>   <span class="hljs-attr">prodEnabled</span>: prodEnabled,<span class="hljs-comment">//prodEnabled, // 生产打包开关</span><br>   <span class="hljs-comment">// 这样可以控制关闭mock的时候不让mock打包到最终代码内</span><br>   <span class="hljs-attr">injectCode</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    import &#123; setupProdMockServer &#125; from &#x27;./mockProdServer&#x27;;</span><br><span class="hljs-string">    setupProdMockServer();</span><br><span class="hljs-string">   `</span>,<br>   <span class="hljs-attr">logger</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//是否在控制台显示请求日志</span><br>   <span class="hljs-attr">supportTs</span>:<span class="hljs-literal">false</span> <span class="hljs-comment">//打开后，可以读取 ts 文件模块 打开后将无法监视 .js 文件</span><br>  &#125;)<br> ],<br> <span class="hljs-comment">// 强制预构建插件包</span><br> <span class="hljs-attr">optimizeDeps</span>: &#123;<br>  <span class="hljs-comment">//检测需要预构建的依赖项</span><br>  <span class="hljs-attr">entries</span>: [],<br>  <span class="hljs-comment">//默认情况下，不在 node_modules 中的，链接的包不会预构建</span><br>  <span class="hljs-attr">include</span>: [<span class="hljs-string">&#x27;axios&#x27;</span>],<br>  <span class="hljs-attr">exclude</span>:[<span class="hljs-string">&#x27;your-package-name&#x27;</span>] <span class="hljs-comment">//排除在优化之外</span><br> &#125;,<br> <span class="hljs-comment">//静态资源服务的文件夹</span><br> <span class="hljs-attr">publicDir</span>: <span class="hljs-string">&quot;public&quot;</span>,<br> <span class="hljs-attr">base</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br> <span class="hljs-comment">//静态资源处理</span><br> <span class="hljs-attr">assetsInclude</span>: <span class="hljs-string">&quot;&quot;</span>,<br> <span class="hljs-comment">//控制台输出的级别 info 、warn、error、silent</span><br> <span class="hljs-attr">logLevel</span>: <span class="hljs-string">&quot;info&quot;</span>,<br> <span class="hljs-comment">// 设为false 可以避免 vite 清屏而错过在终端中打印某些关键信息</span><br> <span class="hljs-attr">clearScreen</span>:<span class="hljs-literal">true</span>,<br> <span class="hljs-attr">resolve</span>: &#123;<br>  <span class="hljs-attr">alias</span>: [<span class="hljs-comment">//配置别名</span><br>   &#123; <span class="hljs-attr">find</span>: <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-attr">replacement</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>) &#125;<br>  ],<br>  <span class="hljs-comment">// 情景导出 package.json 配置中的exports字段</span><br>  <span class="hljs-attr">conditions</span>: [],<br>  <span class="hljs-comment">// 导入时想要省略的扩展名列表</span><br>  <span class="hljs-comment">// 不建议使用 .vue 影响IDE和类型支持</span><br>  <span class="hljs-attr">extensions</span>:[<span class="hljs-string">&#x27;.mjs&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>,<span class="hljs-string">&#x27;.ts&#x27;</span>,<span class="hljs-string">&#x27;.jsx&#x27;</span>,<span class="hljs-string">&#x27;.tsx&#x27;</span>,<span class="hljs-string">&#x27;.json&#x27;</span>]  <br> &#125;,<br> <span class="hljs-comment">// css</span><br> <span class="hljs-attr">css</span>: &#123;<br>  <span class="hljs-comment">// 配置 css modules 的行为</span><br>  <span class="hljs-attr">modules</span>: &#123;  &#125;,<br>  <span class="hljs-comment">// postCss 配置</span><br>  <span class="hljs-attr">postcss</span>: &#123;<br>  &#125;,<br>  <span class="hljs-comment">//指定传递给 css 预处理器的选项</span><br>  <span class="hljs-attr">preprocessorOptions</span>:&#123;<br>   <span class="hljs-attr">scss</span>: &#123;<br>    <span class="hljs-attr">additionalData</span>:<span class="hljs-string">`$injectedColor:orange;`</span><br>   &#125;<br>  &#125;<br> &#125;,<br> <span class="hljs-attr">json</span>: &#123;<br>  <span class="hljs-comment">//是否支持从 .json 文件中进行按名导入</span><br>  <span class="hljs-attr">namedExports</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//若设置为 true 导入的json会被转为 export default JSON.parse(&quot;..&quot;) 会比转译成对象字面量性能更好</span><br>  <span class="hljs-attr">stringify</span>:<span class="hljs-literal">false</span><br> &#125;,<br> <span class="hljs-comment">//继承自 esbuild 转换选项，最常见的用例是自定义 JSX</span><br> <span class="hljs-attr">esbuild</span>: &#123;<br>  <span class="hljs-attr">jsxFactory</span>: <span class="hljs-string">&quot;h&quot;</span>,<br>  <span class="hljs-attr">jsxFragment</span>: <span class="hljs-string">&quot;Fragment&quot;</span>,<br>  <span class="hljs-attr">jsxInject</span>:<span class="hljs-string">`import Vue from &#x27;vue&#x27;`</span><br> &#125;,<br> <span class="hljs-comment">//本地运行配置，以及反向代理配置</span><br> <span class="hljs-attr">server</span>: &#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>  <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//是否启用 http 2</span><br>  <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//为开发服务器配置 CORS , 默认启用并允许任何源</span><br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//服务启动时自动在浏览器中打开应用</span><br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;9000&quot;</span>,<br>  <span class="hljs-attr">strictPort</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//设为true时端口被占用则直接退出，不会尝试下一个可用端口</span><br>  <span class="hljs-attr">force</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否强制依赖预构建</span><br>  <span class="hljs-attr">hmr</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//禁用或配置 HMR 连接</span><br>  <span class="hljs-comment">// 传递给 chockidar 的文件系统监视器选项</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>   <span class="hljs-attr">ignored</span>:[<span class="hljs-string">&quot;!**/node_modules/your-package-name/**&quot;</span>]<br>  &#125;,<br>  <span class="hljs-comment">// 反向代理配置</span><br>  <span class="hljs-attr">proxy</span>: &#123; <br>   <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://xxxx.com/&quot;</span>,<br>    <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^/</span>api/, <span class="hljs-string">&#x27;&#x27;</span>)<br>   &#125;<br>  &#125;<br> &#125;,<br> <span class="hljs-comment">//打包配置</span><br> <span class="hljs-attr">build</span>: &#123;<br>  <span class="hljs-comment">//浏览器兼容性  &quot;esnext&quot;|&quot;modules&quot;</span><br>  <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;modules&quot;</span>,<br>  <span class="hljs-comment">//指定输出路径</span><br>  <span class="hljs-attr">outDir</span>: <span class="hljs-string">&quot;dist&quot;</span>,<br>  <span class="hljs-comment">//生成静态资源的存放路径</span><br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&quot;assets&quot;</span>,<br>  <span class="hljs-comment">//小于此阈值的导入或引用资源将内联为 base64 编码，以避免额外的 http 请求。设置为 0 可以完全禁用此项</span><br>  <span class="hljs-attr">assetsInlineLimit</span>: <span class="hljs-number">4096</span>,<br>  <span class="hljs-comment">//启用/禁用 CSS 代码拆分</span><br>  <span class="hljs-attr">cssCodeSplit</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//构建后是否生成 source map 文件</span><br>  <span class="hljs-attr">sourcemap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">//自定义底层的 Rollup 打包配置</span><br>  <span class="hljs-attr">rollupOptions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-comment">//@rollup/plugin-commonjs 插件的选项</span><br>  <span class="hljs-attr">commonjsOptions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-comment">//构建的库</span><br>  <span class="hljs-attr">lib</span>: &#123;<br>  &#125;,<br>  <span class="hljs-comment">//当设置为 true，构建后将会生成 manifest.json 文件</span><br>  <span class="hljs-attr">manifest</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 设置为 false 可以禁用最小化混淆，</span><br>  <span class="hljs-comment">// 或是用来指定使用哪种混淆器</span><br>  <span class="hljs-comment">// boolean | &#x27;terser&#x27; | &#x27;esbuild&#x27;</span><br>  <span class="hljs-attr">minify</span>: <span class="hljs-string">&quot;terser&quot;</span>, <span class="hljs-comment">//terser 构建后文件体积更小</span><br>  <span class="hljs-comment">//传递给 Terser 的更多 minify 选项。</span><br>  <span class="hljs-attr">terserOptions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-comment">//设置为 false 来禁用将构建后的文件写入磁盘</span><br>  <span class="hljs-attr">write</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//默认情况下，若 outDir 在 root 目录下，则 Vite 会在构建时清空该目录。</span><br>  <span class="hljs-attr">emptyOutDir</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//启用/禁用 brotli 压缩大小报告</span><br>  <span class="hljs-attr">brotliSize</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//chunk 大小警告的限制</span><br>  <span class="hljs-attr">chunkSizeWarningLimit</span>: <span class="hljs-number">500</span><br> &#125;,<br> <span class="hljs-attr">ssr</span>: &#123;<br>  <span class="hljs-comment">// 列出的是要为 SSR 强制外部化的依赖</span><br>  <span class="hljs-attr">external</span>: [],<br>  <span class="hljs-comment">//列出的是防止被 SSR 外部化依赖项</span><br>  <span class="hljs-attr">noExternal</span>: [<br>  ]<br> &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://juejin.cn/post/7039879176534360077"></a><a href="https://juejin.cn/post/7039879176534360077">https://juejin.cn/post/7039879176534360077</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>打包工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack的学习笔记</title>
    <link href="/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/26/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>#webpack #打包器 </p><h1 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm i webpack webpack-cli -g<br></code></pre></td></tr></table></figure><p>一般都在本地安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i webpack webpack-cli --save-dev<br></code></pre></td></tr></table></figure><h1 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">webpack --entry ./src/index.js --mode production<br></code></pre></td></tr></table></figure><p>发现每次都在命令行输入配置不方便，使用webpack.config.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最简单的配置webpack</p><p>运行<code>npx webpack</code> 打包生成bundle.js</p><h2 id="自动引入资源"><a href="#自动引入资源" class="headerlink" title="自动引入资源"></a>自动引入资源</h2><p>引入一个插件html-webpack-plugin，可以自动生成html入口文件和引用js文件的功能，通过配置html模板 、js标签位置、生成的html名称等等功能</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//每次生成后清理上一次的打包文件列表</span><br>    &#125;,<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;app.html&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span><br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>配置文件中mode改为development</p><p>使用source map功能，可以精准定位代码</p><p>使用watch mode，可以监听代码的变化，但是还是要手动刷新浏览器</p><p>使用webpack-dev-server，不但能监听文件的文化从而重新编译，还可以自动帮我们刷新浏览器</p><h1 id="资源模块-asset-modules"><a href="#资源模块-asset-modules" class="headerlink" title="资源模块(asset modules)"></a>资源模块(asset modules)</h1><p>四种类型资源</p><ul><li>asset&#x2F;resource 他会发送一个单独的文件并导出URL（文件地址URL）</li><li>asset&#x2F;inline 导出一个资源的Data URL（Base64）</li><li>asset&#x2F;source 导出资源的源代码 （copy的理解）</li><li>asset 导出一个Data URL和发送一个单独文件之间进行选择</li></ul><h3 id="Resource资源"><a href="#Resource资源" class="headerlink" title="Resource资源"></a>Resource资源</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>             <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.png$/</span>,<br>             <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>             <span class="hljs-attr">generator</span>: &#123;<br>                 <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;images/test.png&#x27;</span><br>             &#125;<br>         &#125;,<br></code></pre></td></tr></table></figure><h3 id="Inline资源"><a href="#Inline资源" class="headerlink" title="Inline资源"></a>Inline资源</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>             <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.svg$/</span>,<br>             <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/inline&#x27;</span><br>         &#125;,<br></code></pre></td></tr></table></figure><h3 id="Source资源"><a href="#Source资源" class="headerlink" title="Source资源"></a>Source资源</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>             <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.txt$/</span>,<br>             <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/source&#x27;</span><br>         &#125;,<br></code></pre></td></tr></table></figure><h3 id="Asset资源"><a href="#Asset资源" class="headerlink" title="Asset资源"></a>Asset资源</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>             <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.jpg$/</span>,<br>             <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset&#x27;</span>,<br>             <span class="hljs-attr">parser</span>: &#123;<br>                 <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>                     <span class="hljs-attr">maxSize</span>: <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>                 &#125;<br>             &#125;<br>         &#125;<br></code></pre></td></tr></table></figure><h1 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h1><p>webpack只能解析js和json，其他文件类型的如css、ts、txt等等可以使用loader</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="普通css"><a href="#普通css" class="headerlink" title="普通css"></a>普通css</h3><p>安装css-loader帮助webpack可以识别项目中使用import、require css文件</p><p>安装style-loader帮助webpack可以讲css文件的内容放到到页面上</p><p>2个同时使用的时候，顺序如下，webpack的loader使用顺序是从右往左走的，先用css加载完成后，再将css代码加入到页面内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>          <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p> <code>npm install less-loader less -D</code> 先进行预处理为css，再走css-loader, style-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽离与压缩CSS文件"><a href="#抽离与压缩CSS文件" class="headerlink" title="抽离与压缩CSS文件"></a>抽离与压缩CSS文件</h3><p>安装<strong>webpack5</strong>中的插件mini-css-extract-plugin ，进行html与css代码的抽离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Webpack.config.js</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;app.html&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span><br>        &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>()<br>    ],<br> <br>  <span class="hljs-comment">// 最后的style-loader 改为 MiniCssExtractPlugin.loader</span><br>  &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>                <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>            &#125;<br></code></pre></td></tr></table></figure><p>使用npx webpack 运行后，</p><ul><li>发现dist文件夹下多了个main.css</li><li>app.html内也没有了style标签多了个link标签引入了这个main.css，也就是html与css分离了</li></ul><h4 id="更改文件夹与文件名"><a href="#更改文件夹与文件名" class="headerlink" title="更改文件夹与文件名"></a>更改文件夹与文件名</h4><p>配置MiniCssExtractPlugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;styles/[contentHash].css&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="压缩CSS"><a href="#压缩CSS" class="headerlink" title="压缩CSS"></a>压缩CSS</h4><p><code>npm install css-minimizer-webpack-plugin -D </code> 安装压缩插件（同样的这个也是在<strong>webpack5</strong>版本下才有的功能）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> webpack.config.js<br><br><span class="hljs-regexp">//</span> 引入插件常量<br>const CssMinimizerPlugin = require(<span class="hljs-string">&#x27;css-minimizer-webpack-plugin&#x27;</span>);<br><br><span class="hljs-regexp">//</span>  mode为生产，生产环境才压缩代码嘛<br> mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br> <br> <span class="hljs-regexp">//</span> 加入优化选项<br> optimization: &#123;<br>        minimizer: [<br>            new CssMinimizerPlugin()<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="加载images图像"><a href="#加载images图像" class="headerlink" title="加载images图像"></a>加载images图像</h2><p>有些background与icon的图像引进到CSS文件中，webpack5中，使用内置的资源模块(Asset Modules)，可以轻松将这些内容混入我们的系统中，这个在[资源模块](# 资源模块(asset modules))中就介绍了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.block-bg</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./assets/inline.svg&#x27;</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> block = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>block.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;block-bg&#x27;</span>)<br>block.<span class="hljs-property">textContent</span> = txtsrc<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231142593.png"></p><h2 id="加载fonts字体"><a href="#加载fonts字体" class="headerlink" title="加载fonts字体"></a>加载fonts字体</h2><p>在css3后加入webfont字库，</p><p>资源模块可以帮助我们加载任何东西，包括字体，尝试用之前的资源模块去加载我们指定的字体文件</p><p>去阿里的字体库随意下载个图标字体代码，目的是为了引入个iconfont.ttf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Webpack.config.js 中配置</span><br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>            &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">// css中加入<span class="hljs-attribute">font</span>-face 加载引用的字体文件，可以本地，可以在线 <span class="hljs-attribute">font-family</span> 定义自定义字体的名称<br>// 后面的<span class="hljs-selector-class">.icon</span>类名使用自定义字体的名称去使用<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;hbisedm&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./assets/iconfont.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-selector-class">.icon</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;hbisedm&#x27;</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231315690.png"></p><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>JSON、CSV、TSV、XML等等</p><p>安装对应依赖  <code>npm install csv-loader xml-loader -D</code></p><p>准备2个文件(xml、csv)</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231325070.png" alt="image-20220523132540279"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231326503.png" alt="image-20220523132601067"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js</span><br>&#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(csv|tsv)$/</span>,<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;csv-loader&#x27;</span>,<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.xml$/</span>,<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;xml-loader&#x27;</span>,<br>            &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Data</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/data.xml&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Nodes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/data.csv&#x27;</span><br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Data</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Nodes</span>);<br></code></pre></td></tr></table></figure><p>运行webpack-dev-server，发现xml变成了对象，而csv变成了个数组</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231328252.png" alt="image-20220523132825192"></p><h2 id="自定义JSON模块parser"><a href="#自定义JSON模块parser" class="headerlink" title="自定义JSON模块parser"></a>自定义JSON模块parser</h2><p>安装依赖 <code>npm install toml yaml json5 -D</code></p><p>将类似json格式的文件转成json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br>&#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.toml$/</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                <span class="hljs-attr">parser</span>: &#123;<br>                    <span class="hljs-attr">parse</span>: toml.<span class="hljs-property">parse</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.yaml$/</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                <span class="hljs-attr">parser</span>: &#123;<br>                    <span class="hljs-attr">parse</span>: yaml.<span class="hljs-property">parse</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.json5$/</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                <span class="hljs-attr">parser</span>: &#123;<br>                    <span class="hljs-attr">parse</span>: json5.<span class="hljs-property">parse</span><br>                &#125;<br>            &#125;,<br><br></code></pre></td></tr></table></figure><p>每种不同格式的文件内容如下图：</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231350963.png" alt="image-20220523135014257"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231350894.png" alt="image-20220523135037836"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231350655.png" alt="image-20220523135055609"></p><p>webpack配置文件配置loader后，我们就可以在js文件内引入这些文件了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><br><span class="hljs-keyword">import</span> toml <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/data.toml&#x27;</span><br><span class="hljs-keyword">import</span> yaml <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/data.yaml&#x27;</span><br><span class="hljs-keyword">import</span> json5 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/data.json5&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;toml&#x27;</span>, toml);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(toml.<span class="hljs-property">title</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(toml.<span class="hljs-property">owner</span>.<span class="hljs-property">name</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yaml&#x27;</span>, yaml);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(yaml.<span class="hljs-property">title</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(yaml.<span class="hljs-property">owner</span>.<span class="hljs-property">name</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;json5&#x27;</span>, json5);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json5.<span class="hljs-property">title</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json5.<span class="hljs-property">owner</span>.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>获取的数据为JavaScript对象的格式</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205231353436.png" alt="image-20220523135330391"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>除了使用前面的[资源模块](# 资源模块(asset modules))可以去引用外部资源文件，我们还可以使用Loader这个配置属性去配置我们想要引入的外部资源文件。</p><p>如css文件，我们可以使用style-loader和css-loader去加载css外部资源文件，并将css代码放在了head标签内的style标签，接着使用sass-loader、less-loader去引入css预处理工具，接着使用 <code>MiniCssExtractPlugin</code> 插件可以将我们css代码和html文件进行分离css代码并自定义生成的css名称与路径；使用 <code>CssMinimizerPlugin</code> 插件可以将css代码进行压缩。 通过资源模块的配置去加载图片资源，在css中引入相应的图片资源。利用 <code>asset/resource</code> 去加载字体文件 从而使webpack可以打包iconfont。对于一些数据如csv、xml，JavaScript自然也是不会识别的，但是通过webpack这个加入相应的loader也是可以做到解析数据出来的。对一些json格式的同类文件如yaml、json5等等，加入对应的loader进行解析。</p><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>webpack中使用babel-loader将es6语法降低以致于适配低版本的浏览器</p><p><code>npm install babel-loader @babel/core @babel/preset-env -D</code></p><ul><li><code>babel-loader</code>: 在webpack里应用babel解析ES6的桥梁</li><li><code>@babel/core</code>: babel核心模块</li><li><code>@babel/preset-env</code>: babel预设，一组babel插件的集合（babel我要配置好多东西，如果有预设，就一条代码就等于配置了很多东西）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js</span><br> &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>                <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>                <span class="hljs-attr">use</span>:&#123;<br>                    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>                    <span class="hljs-attr">options</span>: &#123;<br>                        <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>]<br>                    &#125;<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>发现aysnc&#x2F;await语法不起作用，少了个<strong>regeneratorRuntime</strong></p><h2 id="regeneratorRuntime"><a href="#regeneratorRuntime" class="headerlink" title="regeneratorRuntime"></a>regeneratorRuntime</h2><p><strong>regeneratorRuntime</strong> 是 webpack 打包生成的全局辅助函数，由 babel 生成，用于兼容 async&#x2F;await 等高级语法。</p><p><code>npm i @babel/runtime @babel/plugin-transform-runtime -D</code></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>webpack天生可以加载js模块化，但是只是个打包器，并不难转化js语法，这个时候就需要个babel</p><p>babel与webpack的结合就需要个babel-loader</p><h1 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h1><h2 id="入口起点"><a href="#入口起点" class="headerlink" title="入口起点"></a>入口起点</h2><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232152401.png" alt="image-20220523215248342"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: &#123;<br>      <span class="hljs-attr">index</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>      <span class="hljs-attr">another</span>: <span class="hljs-string">&#x27;./src/another-module.js&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].bundle.js&#x27;</span>,<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232153431.png" alt="image-20220523215358378"></p><p>分析下代码</p><ul><li>another中引入了lodash文件。</li><li>index中使用了babel-loader，会把一些js代码打进去。</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232157510.png" alt="image-20220523215709452"></p><p>app.html 中加入了我们刚才entry入口配置的那2个bundle.js </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>我们在index中也使用lodash</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;module&#x27;</span>, <span class="hljs-string">&#x27;loaded&#x27;</span>]));<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232200062.png" alt="image-20220523220031994"></p><p>我们发现2个js文件，体积都变大了</p><p>本来lodash是一个共享的js文件，但是我们使用这种<strong>多入口</strong>文件打包方式，导致我们打包后的体积变大了。</p><p>导致问题：入口的chuck之间有共享代码，打包后的bundle文件导致体积大的</p><h2 id="防止重复代码"><a href="#防止重复代码" class="headerlink" title="防止重复代码"></a>防止重复代码</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>配置webpack.config.js的入口文件，加入个dependOn参数，这个参数又指向一个共享资源文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: &#123;<br>      <span class="hljs-attr">index</span>: &#123;<br>          <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>          <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;shared&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">another</span>: &#123;<br>          <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./src/another-module.js&#x27;</span>,<br>          <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;shared&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">shared</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>意思就是说，当我们这2个模块(index、another)中，有lodash这个模块，就会把它抽离出来，并命名为shared的chunk</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232209665.png" alt="image-20220523220928618"></p><p>发现生成的文件变成3个js文件</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232210236.png" alt="image-20220523221050175"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用webpack的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs webpack.config.js">entry: &#123;<br>      // index: &#123;<br>      //     import: &#x27;./src/index.js&#x27;,<br>      //     dependOn: &#x27;shared&#x27;<br>      // &#125;,<br>      // another: &#123;<br>      //     import: &#x27;./src/another-module.js&#x27;,<br>      //     dependOn: &#x27;shared&#x27;<br>      // &#125;,<br>      // shared: &#x27;lodash&#x27;<br>      index: &#x27;./src/index.js&#x27;,<br>      another: &#x27;./src/another-module.js&#x27;,<br>  &#125;,<br>  <br>optimization: &#123;<br>      splitChunks: &#123;<br>          chunks: &#x27;all&#x27;,<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232216849.png" alt="image-20220523221631783"></p><p>使用这种方式多了2个webpack生成的文件，</p><h2 id="动态引入-异步导入"><a href="#动态引入-异步导入" class="headerlink" title="动态引入(异步导入)"></a>动态引入(异步导入)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// async-module.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getComponent</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123;<span class="hljs-keyword">default</span>: _&#125;</span>)=&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>        div.<span class="hljs-property">innerHTML</span> = _.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;webpack&#x27;</span>], <span class="hljs-string">&#x27; &#x27;</span>);<br>        <span class="hljs-keyword">return</span> div<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">getComponent</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">component</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(component)<br>&#125;)<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./async-module&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232229726.png" alt="image-20220523222936656"></p><p>发现这种import写法，webpack可以帮我们分离引入的代码</p><p>一旦我们静态资源文件中也加入了lodash模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js </span><br><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;module&#x27;</span>, <span class="hljs-string">&#x27;loaded&#x27;</span>]));<br></code></pre></td></tr></table></figure><p>运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232235041.png" alt="image-20220523223557987"></p><p>发现我们打包的2个文件，变成了一个index.bundle.js，也就是说一旦静态资源引用了同一个模块，就没了webpack刚才帮我们自动打包的引入的文件，也就没了代码分离了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js</span><br><span class="hljs-attr">splitChunks</span>: &#123;<br>            <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>        &#125;<br></code></pre></td></tr></table></figure><p>将这个配置打开后。又回到了代码分离的情况了～</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232235259.png" alt="image-20220523223509193"></p><p><strong>这个时候，也就是我们所谓的动态导入与静态导入都可以代码分离出来</strong></p><p>再将一开始的another文件入口也打开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">entry: &#123;<br>      index: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>      another: <span class="hljs-string">&#x27;./src/another-module.js&#x27;</span>,<br>      &#125;<br></code></pre></td></tr></table></figure><p><code>npx webpack</code>运行</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205232241685.png" alt="image-20220523224147612"></p><p>发现还是一样的情况，公共的模块抽离出来了！！！！！</p><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>当我们需要这个js文件的时候才去服务器拿</p><p>新建个math.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt;  x + y <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">min</span> = (<span class="hljs-params">x, y</span>) =&gt;  x - y <br></code></pre></td></tr></table></figure><p>在index.js中使用math的add方法（以动态引入的方式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>button.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;点击执行加法运算&#x27;</span><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./math&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; add &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    &#125;)<br> &#125;)<br><br> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(button)<br></code></pre></td></tr></table></figure><p>webpack打包后生成了个<code>src_math_js.bundle.js</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205241746490.png"></p><p>当点击按钮后，当前网页才会去加载这个JS文件，达到了按需加载与代码分离的情况</p><p>我们当然也可以自定义这个bundleJs的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack的魔法注释</span><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;math&#x27; */</span><span class="hljs-string">&#x27;./math&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; add &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    &#125;)<br> &#125;)<br></code></pre></td></tr></table></figure><p>打包后就变成了<code>math.bundle.js</code></p><h3 id="预获取和预加载"><a href="#预获取和预加载" class="headerlink" title="预获取和预加载"></a>预获取和预加载</h3><p>Webpack v4.6.0+ 增加了对预获取和预加载的支持。</p><p>在声明 import 时，使用下面这些内置指令，可以让 webpack输出 “resource hint(资源提示），来告知浏览器：</p><ul><li>prefetch(预获取)：将来某些导航下可能需要的资源</li><li>preload(预加载)：当前导航下可能需要资源</li></ul><h4 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;math&#x27;, webpackPrefetch: true */</span><span class="hljs-string">&#x27;./math&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; add &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    &#125;)<br> &#125;)<br></code></pre></td></tr></table></figure><p>打包后，发现每次刷新网页都会去加载这个math.bundle.js</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242014028.png"></p><p>这个是浏览器的link的prefetch，当我们浏览器加载所有文件后，网络若空闲了，就会去加载prefetch的对应资源</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242017543.png" alt="image-20220524201703506"></p><p>当点击按钮后，再去加载我们的math.bundle.js，但此时这个文件其实已经下载好了。  </p><h4 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;math&#x27;, webpackPreload: true */</span><span class="hljs-string">&#x27;./math&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; add &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    &#125;)<br> &#125;)<br></code></pre></td></tr></table></figure><p>效果与懒加载类似</p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>代码分离是webpack一个好用的地方，将主文件分离出来，减少主文件的大小，从而<strong>提高首屏的加载速度。</strong></p><p>分离代码有三种方法</p><ul><li>入口起点配置（配置多入口实现代码的分离）</li><li>防止重复（也是在入口起点配置，不过可以将一个共享资源文件抽离出来一个bundle，从而防止代码的重复打包）</li><li>动态导入｜异步导入（使用ES6的导入模块的方法import来实现代码的分离）<ul><li>懒加载（编译的时候把模块打包好，在浏览器中，需要的时候再去加载，达到<strong>按需加载</strong>）</li><li>预获取和预加载（编译的时候把模块打包好，浏览器网络空闲时，去下载，省去了将来模块加载的延迟速度；preload实现页面模块的<strong>并行加载</strong>）</li></ul></li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="输出文件的文件名"><a href="#输出文件的文件名" class="headerlink" title="输出文件的文件名"></a>输出文件的文件名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>       <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].bundle.js&#x27;</span>,<br>       <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>       <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>       <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>   &#125;,<br></code></pre></td></tr></table></figure><blockquote><p>第一次打包后生成的文件名叫做xxxx.bundle.js，如果第二次打包前，我们修改了某个文件内容，这时候打包后输出的文件名还是叫做xxxx.bundle.js，由于浏览器有缓存机制，它会认为我们的文件并没有修改，使用上一份xxxx.bundle.js</p></blockquote><p><strong>[name].bundle.js</strong> 中name这种称为<code>substitution</code> 可替换的模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].[contenthash].js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>    &#125;,<br></code></pre></td></tr></table></figure><p>这样就会根据文件内容生成不同的hash值，从而我们文件名会根据文件内容的修改，而生成不同的文件名。这样就不怕浏览器缓存了。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242137883.png" alt="image-20220524213700813"></p><p>上面的操作是操作我们自己写的js文件，而大部分情况，项目需要引入第三方js文件。</p><h2 id="缓存第三方库"><a href="#缓存第三方库" class="headerlink" title="缓存第三方库"></a>缓存第三方库</h2><p>将第三方库(ibrary)（例如 Lodash ）提取到单独的 vendor chunk 文件中，是比较推荐的做法，这是因为，它们很少像本地的源代码那样频繁修改。因此通过实现以上步骤，利用 client 的长效缓存机制，命中缓存来消除请求，并减少向 server获取资源，同时还能保证 client 代码和 server 代码版本一致。我们在optimization.splitchunks 添加如下 cacheGroups 参数并构建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">splitChunks</span>: &#123;<br>         <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span> <br>        &#125;<br><br><span class="hljs-comment">// 改为下面</span><br><br><span class="hljs-attr">splitChunks</span>: &#123;<br>            <span class="hljs-attr">cacheGroups</span>: &#123; <span class="hljs-comment">//缓存组</span><br>                <span class="hljs-attr">vendor</span>: &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>, <span class="hljs-comment">//将node_modules的缓存</span><br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vendors&#x27;</span>,<br>                    <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242144666.png" alt="image-20220524214448600"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242146270.png" alt="image-20220524214650211"></p><p>可以发现第三方的包都打到了一个vendors.[contenthash].js内</p><h2 id="将所有的js文件放到一个文件夹下"><a href="#将所有的js文件放到一个文件夹下" class="headerlink" title="将所有的js文件放到一个文件夹下"></a>将所有的js文件放到一个文件夹下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;scripts/[name].[contenthash].js&#x27;</span>, <span class="hljs-comment">//加入`scripts/` 目录</span><br>      <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>      <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>  &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242150679.png" alt="image-20220524215020607"></p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>当我们打包好后的文件，自然要放到服务器上，浏览器访问服务器上的资源文件，会有个缓存机制！</p><p>这样呢，如果修改了业务代码，但是对应的js文件名不变的话，会使用浏览器本地缓存好的文件。这样就有错误！拿不到最新的内容</p><ul><li>修改输出文件的文件名来解决这个问题  使用可替换模版字符串的方法来替换</li><li>缓存第三方库 通过修改<code>optimization.splitChunks</code>这个属性来实现，使用cacheGroups缓存组，将我们使用第三方代码都打包到同一个文件内，在浏览器缓存，由于这个文件不频繁更新，所以可以提高首屏加载速度。</li><li>将所有js打包到同一个文件夹中，以致样式、脚本、文本、图片各个不同类型的资源文件放到不同的文件夹中。</li></ul><h1 id="拆分开发环境和生产环境的配置"><a href="#拆分开发环境和生产环境的配置" class="headerlink" title="拆分开发环境和生产环境的配置"></a>拆分开发环境和生产环境的配置</h1><blockquote><p>现在的我，只会手工的修改mode来切换开发环境和生产环境</p></blockquote><p>但是有些配置在生产环境和开发环境是不一样的，如dev环境不需要设置缓存，而生产环境需要设置公共路径等等情况。</p><h2 id="公共路径-publicPath"><a href="#公共路径-publicPath" class="headerlink" title="公共路径(publicPath)"></a>公共路径(publicPath)</h2><p>使用publicPath来指定应用程序中所有资源的基础路径</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242210825.png" alt="image-20220524221039765"></p><p>我们可不可以使用cdn或者自定义服务器的路径去指定呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;scripts/[name].[contenthash].js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>        <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;http://localhost:8080/&#x27;</span> <span class="hljs-comment">// 添加publicPath</span><br>    &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242213981.png" alt="image-20220524221330916"></p><p>这个域名我们指定为cdn域名或者前端项目的域名</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242217123.png" alt="image-20220524221700060"></p><p>修改webpack.config.js为函数形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack --<span class="hljs-built_in">env</span> production --<span class="hljs-built_in">env</span> devCoder=Hbisedm                                             <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242219808.png" alt="image-20220524221919740"></p><p>这样就可以拿到我们定好的环境变量</p><p>这样我们就可以灵活使用变量做一些事情了。</p><p>我们如何压缩打包好js代码，其实webpack自带了个开箱即用的terser的，那为什么现在代码还是没有压缩呢？</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242222950.png" alt="image-20220524222253893"></p><p>原因是我们webpack.config.js使用CSS压缩，这种情况terser就得我们自己去单独配置才可以生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install terser-webpack-plugin -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;terser-webpack-plugin&#x27;</span>)<br> <br><span class="hljs-attr">mode</span>: env.<span class="hljs-property">production</span> ? <span class="hljs-string">&#x27;production&#x27;</span> : <span class="hljs-string">&#x27;development&#x27;</span>,<br><br><span class="hljs-attr">optimization</span>: &#123;<br><span class="hljs-attr">minimizer</span>: [<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>() <span class="hljs-comment">//加入这个插件，达到js压缩(prod环境下)</span><br>            ],<br>         &#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack --<span class="hljs-built_in">env</span> production<br></code></pre></td></tr></table></figure><p>打包后的js代码压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack --<span class="hljs-built_in">env</span> development<br></code></pre></td></tr></table></figure><p>打包后的js代码未压缩</p><p><strong>这就是我们环境变量的意义</strong></p><h2 id="拆分配置文件"><a href="#拆分配置文件" class="headerlink" title="拆分配置文件"></a>拆分配置文件</h2><p>创建个conifg文件夹下创建个webpack.config.dev.js </p><p>.&#x2F;config&#x2F;webpack.config.dev.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-comment">// const CssMinimizerPlugin = require(&#x27;css-minimizer-webpack-plugin&#x27;);</span><br><span class="hljs-comment">// const TerserPlugin = require(&#x27;terser-webpack-plugin&#x27;)</span><br><br><span class="hljs-keyword">const</span> toml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;toml&#x27;</span>)<br><span class="hljs-keyword">const</span> yaml =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;yaml&#x27;</span>)<br><span class="hljs-keyword">const</span> json5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;json5&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>        <span class="hljs-attr">entry</span>: &#123;<br>            <span class="hljs-attr">index</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>            <span class="hljs-attr">another</span>: <span class="hljs-string">&#x27;./src/another-module.js&#x27;</span>,<br>        &#125;,<br>    <br>        <span class="hljs-attr">output</span>: &#123;<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;scripts/[name].js&#x27;</span>, <span class="hljs-comment">//删掉[contentHash]缓存文件名</span><br>            <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>            <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>            <span class="hljs-comment">// publicPath: &#x27;http://localhost:8080/&#x27; //dev环境 没必要</span><br>        &#125;,<br>        <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">//dev 肯定使用这个</span><br><br>        <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;inline-source-map&#x27;</span>, <span class="hljs-comment">//需要调试代码，这个是需要的</span><br>        <br>        <span class="hljs-attr">plugins</span>: [<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>                <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>                <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;app.html&#x27;</span>,<br>                <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span><br>            &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>                <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;styles/[contenthash].css&#x27;</span><br>            &#125;)<br>        ],<br>        <span class="hljs-attr">devServer</span>: &#123; <span class="hljs-comment">// dev环境肯定需要这个</span><br>            <span class="hljs-attr">static</span>: <span class="hljs-string">&#x27;./dist&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">module</span>: &#123;<br>            <span class="hljs-attr">rules</span>: [<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>                    <span class="hljs-attr">generator</span>: &#123;<br>                        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;images/test.png&#x27;</span><br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.svg$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/inline&#x27;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/source&#x27;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset&#x27;</span>,<br>                    <span class="hljs-attr">parser</span>: &#123;<br>                        <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>                            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>    <br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>                    <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>                &#125;,<br>    <br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>                &#125;,<br>    <br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(csv|tsv)$/</span>,<br>                    <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;csv-loader&#x27;</span>,<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.xml$/</span>,<br>                    <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;xml-loader&#x27;</span>,<br>                &#125;,<br>                <br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.toml$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                    <span class="hljs-attr">parser</span>: &#123;<br>                        <span class="hljs-attr">parse</span>: toml.<span class="hljs-property">parse</span><br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.yaml$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                    <span class="hljs-attr">parser</span>: &#123;<br>                        <span class="hljs-attr">parse</span>: yaml.<span class="hljs-property">parse</span><br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.json5$/</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                    <span class="hljs-attr">parser</span>: &#123;<br>                        <span class="hljs-attr">parse</span>: json5.<span class="hljs-property">parse</span><br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>                    <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>                    <span class="hljs-attr">use</span>:&#123;<br>                        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>                        <span class="hljs-attr">options</span>: &#123;<br>                            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>],<br>                            <span class="hljs-attr">plugins</span>: [<br>                                [<br>                                    <span class="hljs-string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,<br>                                ]<br>                            ]<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <br>            ] <br>        &#125;,<br>    <br>        <span class="hljs-attr">optimization</span>: &#123;<br>            <span class="hljs-comment">// dev环境不需要压缩</span><br>            <span class="hljs-comment">// minimizer: [</span><br>            <span class="hljs-comment">//     new CssMinimizerPlugin(),</span><br>            <span class="hljs-comment">//     new TerserPlugin()</span><br>            <span class="hljs-comment">// ],</span><br>            <span class="hljs-attr">splitChunks</span>: &#123;<br>                <span class="hljs-attr">cacheGroups</span>: &#123;<br>                    <span class="hljs-attr">vendor</span>: &#123;<br>                        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>                        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vendors&#x27;</span>,<br>                        <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack --config ./config/webpack.config.dev.js<br>npx webpack -c ./config/webpack.config.dev.js //简写<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205242241759.png" alt="image-20220524224101667"></p><p>将output属性修改下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;scripts/[name].js&#x27;</span>, <span class="hljs-comment">//删掉[contentHash]缓存文件名</span><br>            <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../dist&#x27;</span>), <span class="hljs-comment">// &#x27;./dist&#x27; =&gt; &#x27;../dist&#x27;</span><br>            <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;images/[name][hash:8][ext]&#x27;</span>,<br>            <span class="hljs-comment">// publicPath: &#x27;http://localhost:8080/&#x27; //dev环境 没必要</span><br>        &#125;,<br></code></pre></td></tr></table></figure><p>就达到替换了</p><p>配置下生产配置webpack.config.prod.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CssMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;css-minimizer-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> toml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;toml&quot;</span>);<br><span class="hljs-keyword">const</span> yaml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;yaml&quot;</span>);<br><span class="hljs-keyword">const</span> json5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;json5&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">index</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>    <span class="hljs-attr">another</span>: <span class="hljs-string">&quot;./src/another-module.js&quot;</span>,<br>  &#125;,<br><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;scripts/[name].[contenthash].js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>), <span class="hljs-comment">// ./dist =&gt; ../dist</span><br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&quot;images/[name][hash:8][ext]&quot;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;http://localhost:8080/&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">mode</span>:  <span class="hljs-string">&quot;production&quot;</span>, <span class="hljs-comment">// prod =&gt; production</span><br><br>  <span class="hljs-comment">// devtool: &quot;inline-source-map&quot;, // 生成环境不需要调试</span><br>  <br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./index.html&quot;</span>,<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;app.html&quot;</span>,<br>      <span class="hljs-attr">inject</span>: <span class="hljs-string">&quot;body&quot;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;styles/[contenthash].css&quot;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// prod 不需要devServer </span><br><span class="hljs-comment">//   devServer: &#123;</span><br><span class="hljs-comment">//     static: &quot;./dist&quot;,</span><br><span class="hljs-comment">//   &#125;,</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;images/test.png&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.svg$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/inline&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/source&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(csv|tsv)$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;csv-loader&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.xml$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;xml-loader&quot;</span>,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.toml$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: toml.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.yaml$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: yaml.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.json5$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: json5.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>            <span class="hljs-attr">plugins</span>: [[<span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>]],<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimizer</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>()],<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">vendor</span>: &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;vendors&quot;</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack -c ./config/webpack.config.prod.js<br></code></pre></td></tr></table></figure><p>打包后的文件，代码压缩达到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack -c 目标配置文件<br></code></pre></td></tr></table></figure><p><strong>通过上面2个文件达到了配置js文件的分离</strong></p><p>当然我们也可以使用webpack的开发服务器指定相应的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx webpack server -c 目标配置文件<br>// 相当于 npx webpack-dev-server<br></code></pre></td></tr></table></figure><h2 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h2><p>在子目录中创建个package.json</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205250938820.png"></p><p>发现每次使用的还是最外层的node_modules的东西，且还要下载安装些依赖。不如要它们copy一份过来</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205250942779.png" alt="image-20220525094247652"></p><p>再将package.json里面的scripts修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack server -c ./config/webpack.config.dev.js&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack -c ./config/webpack.config.prod.js&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>为何不需要npx呢，原因是我们在package.json中写脚本，它会自动去往node_modules中找相应的脚本来执行。这样走的就是当前目录的东西了。不用下载依赖</p><h2 id="提取公共配置"><a href="#提取公共配置" class="headerlink" title="提取公共配置"></a>提取公共配置</h2><p>在config文件夹内新建个webpack.config.common.js，将公共配置提取到这个js文件内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> toml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;toml&quot;</span>);<br><span class="hljs-keyword">const</span> yaml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;yaml&quot;</span>);<br><span class="hljs-keyword">const</span> json5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;json5&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">index</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>    <span class="hljs-attr">another</span>: <span class="hljs-string">&quot;./src/another-module.js&quot;</span>,<br>  &#125;,<br><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// filename: &quot;scripts/[name].[contenthash].js&quot;, </span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>),<br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&quot;images/[name][hash:8][ext]&quot;</span>,<br>    <span class="hljs-comment">// publicPath: &quot;http://localhost:8080/&quot;,</span><br>  &#125;,<br><span class="hljs-comment">//   mode: env.production ? &quot;production&quot; : &quot;development&quot;,</span><br><span class="hljs-comment">//   devtool: &quot;inline-source-map&quot;,</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./index.html&quot;</span>,<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;app.html&quot;</span>,<br>      <span class="hljs-attr">inject</span>: <span class="hljs-string">&quot;body&quot;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;styles/[contenthash].css&quot;</span>,<br>    &#125;),<br>  ],<br><span class="hljs-comment">//   devServer: &#123;</span><br><span class="hljs-comment">//     static: &quot;./dist&quot;,</span><br><span class="hljs-comment">//   &#125;,</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;images/test.png&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.svg$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/inline&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/source&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(csv|tsv)$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;csv-loader&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.xml$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;xml-loader&quot;</span>,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.toml$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: toml.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.yaml$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: yaml.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.json5$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">parse</span>: json5.<span class="hljs-property">parse</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>            <span class="hljs-attr">plugins</span>: [[<span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>]],<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-comment">// minimizer: [new CssMinimizerPlugin(), new TerserPlugin()],</span><br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">vendor</span>: &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;vendors&quot;</span>,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>修改webpack.config.dev.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;scripts/[name].js&quot;</span>, <span class="hljs-comment">//删掉[contentHash]缓存文件名</span><br>  &#125;,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">//dev 肯定使用这个</span><br><br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>, <span class="hljs-comment">//需要调试代码，这个是需要的</span><br><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// dev环境肯定需要这个</span><br>    <span class="hljs-attr">static</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>修改webpack.config.prod.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CssMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;css-minimizer-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;scripts/[name].[contenthash].js&quot;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;http://localhost:8080/&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">mode</span>:  <span class="hljs-string">&quot;production&quot;</span>, <span class="hljs-comment">// prod =&gt; production</span><br><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimizer</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>()],<br>  &#125;,<br><br>  <span class="hljs-attr">performance</span>: &#123;<br>      <span class="hljs-attr">hints</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>使用webpack-merge 将通用配置和不同环境的配置合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack-merge -D<br></code></pre></td></tr></table></figure><p>在config文件夹下创建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><br><span class="hljs-keyword">const</span> commonConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.common&quot;</span>);<br><span class="hljs-keyword">const</span> productionConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.prod&quot;</span>);<br><span class="hljs-keyword">const</span> developmentConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.dev&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">env</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">switch</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">case</span> env.<span class="hljs-property">development</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, developmentConfig);<br>    <span class="hljs-keyword">case</span> env.<span class="hljs-property">production</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, productionConfig);<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27; No mating&#x27;</span>)<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>再次修改下package.json的scripts脚本属性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack server -c ./config/webpack.config.js --env development&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack -c ./config/webpack.config.js --env production&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>然后运行<code>npm run start</code>或者<code>npm run build</code></p><p>达到了环境拆分、配置不同文件</p><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><ul><li>一开始我们使用配置publicPath来配置公共路径，</li><li>接着在命令行中可以携带<code>--env xxxx</code> 可以传到webpack.config.js中去，</li><li>拆分dev和prod环境的配置，分为2个不同的文件，每次执行的时候选择不同的文件去执行</li><li>使用package.json的scripts脚本可以配置我们每次运行的命令</li><li>将dev和prod的2个文件的共同部分抽离出来，再使用webpack-merge这个第三方依赖将通用配置和不同环境特有的配置合并后再运行webpack进行处理</li></ul><h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1><h1 id="提高开发效率与完善团队开发规范"><a href="#提高开发效率与完善团队开发规范" class="headerlink" title="提高开发效率与完善团队开发规范"></a>提高开发效率与完善团队开发规范</h1><h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><blockquote><p>何为source-map，是我们打包后的bundle.js在浏览器若发生报错，我们可以<strong>快速定位到开发时的js文件的位置</strong>。</p></blockquote><p> devtool属性的7个模式</p><table><thead><tr><th>模式</th><th>解释</th></tr></thead><tbody><tr><td>eval</td><td>每个module会封装到 eval 里包裹起来执行，并且会在末尾追加注释 &#x2F;&#x2F;@ sourceURL.</td></tr><tr><td>source-map</td><td>生成一个SourceMap文件</td></tr><tr><td>hidden-source-map</td><td>和 source-map 一样，但不会在 bundle 末尾追加注释.</td></tr><tr><td>inline-source-map</td><td>生成一个 DataUrl 形式的 SourceMap 文件．</td></tr><tr><td>eval-source-map</td><td>每个module会通过eval()来执行，并且生成一个DataUr!形式的SourceMap.</td></tr><tr><td>cheap-source-map</td><td>生成一个没有列信息(column-mappings）的SourceMaps文件，不包含loader的sourcemap（譬如 babel 的 sourcemap)</td></tr><tr><td>cheap-module-source-map</td><td>生成一个没有列信息 (column-mappings) 的SourceMaps文件，同时 loader的sourcemap 也被简化为只包含对应行的。</td></tr></tbody></table><p>要注意的是，生产环境我们一般不会开启sourcemap功能，主要有两点原因：</p><ol><li>通过bundle和sourcemap文件，可以反编译出源码一一一一也就是说，线上产物有soucemap文件的话，就意味着有暴漏源码的风险。</li><li>我们可以观察到，sourcemap文件的体积相对比较巨大,这跟我们生产环境的追求不同(生产环境追求更小更轻量的bundle)。</li></ol><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>webpack的devtool的默认模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./app.js&#x27;</span>,<br><br>    <span class="hljs-comment">// devtool: false,</span><br><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>不开启devtool默认走eval</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251135864.png" alt="image-20220525113520766"></p><p>发现打包好的文件，走的是eval，启动devserver</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251136951.png" alt="image-20220525113620849"></p><p>发现文件定位在了 <code>app.js</code>可以帮助开发人员快速定位代码的位置</p><p>当吧devtool设置为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./app.js&#x27;</span>,<br><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-literal">false</span>,<br><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251137109.png" alt="image-20220525113742009"></p><p>发现就直接讲app.js的代码挪到了打包好的main.js里面了，开启devserver</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251139553.png" alt="image-20220525113902451"></p><p>这样就没办法定位开发时的源码位置在哪了。</p><h4 id="source-map-1"><a href="#source-map-1" class="headerlink" title="source-map"></a>source-map</h4><p>将devtool设置为<code>source-map</code></p><p>运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251143190.png" alt="image-20220525114334095"></p><p>发现还是跟关闭devtool的时候一样，只是代码多了个注释，打包后多了个map文件</p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251145295.png" alt="image-20220525114526233"></p><p>发现我们还是可以定位代码的源头</p><h4 id="hidden-source-map"><a href="#hidden-source-map" class="headerlink" title="hidden-source-map"></a>hidden-source-map</h4><p>将devtool设置为hidden-source-map</p><p> 与source-map作类比，就是打包后的main.js文件中少了个map注释</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251147631.png" alt="image-20220525114706547"></p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251148435.png" alt="image-20220525114843363"></p><p>发现已经不可以定位业务代码的位置</p><p>说明使用hidden-source-map模式虽然也是会生产map文件，但是已经不会和我们的main.js作关联了。</p><h4 id="inline-source-map"><a href="#inline-source-map" class="headerlink" title="inline-source-map"></a>inline-source-map</h4><p>devtool设置为inline-source-map</p><p>运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251153162.png" alt="image-20220525115346064"></p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251154806.png" alt="image-20220525115424696"></p><p>发现效果和source-map一样，可以定位源代码的位置。只是区别在于</p><ul><li><p>少了source-map模式下会打包多个map文件</p></li><li><p>注释的东西不一样</p></li></ul><h4 id="eval-source-map"><a href="#eval-source-map" class="headerlink" title="eval-source-map"></a>eval-source-map</h4><p>devtool设置为eval-source-map</p><p>运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251157540.png" alt="image-20220525115736429"></p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251158142.png" alt="image-20220525115808024"></p><p>发现效果和inline-source-map一样，可以定位源代码的位置。</p><ul><li><p>一样少了source-map模式下会打包多个map文件</p></li><li><p>注释的东西不一样</p></li><li><p>eval后面的注释，应该是用Base64的形式生成的</p></li></ul><h4 id="cheap-source-map"><a href="#cheap-source-map" class="headerlink" title="cheap-source-map"></a>cheap-source-map</h4><p>会生成一个没有列信息的sourcemap</p><p>修改为cheap-source-map，运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251417793.png" alt="image-20220525141701680"></p><p>这个mappings是代码映射，里面的内容是代码的行数描述，没有列数。</p><p>若改为source-map，运行<code>npx webpack</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251418245.png" alt="image-20220525141832130"></p><p>多了这个是列数，现在代码只有一行，但实际情况，代码有很多的，而且一般开发的时候，定到行数就行，没必要让这个文件那么大。</p><p>这个同样是可以定位到源代码的。</p><h4 id="cheap-module-source-map"><a href="#cheap-module-source-map" class="headerlink" title="cheap-module-source-map"></a>cheap-module-source-map</h4><p>和上面的效果一样，但是这个模式还会加载一些第三方库。上面的cheap-source-map却不会。</p><p>在当前项目中安装babel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-loader @babel/core @babel/preset-env -D<br></code></pre></td></tr></table></figure><p>使用ES6类写法，让babel可以进行转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span> = <span class="hljs-string">&#x27;hello webpack&#x27;</span><br>    &#125;<br>    <br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>()<br><br>a.<span class="hljs-title function_">sayHello</span>()<br></code></pre></td></tr></table></figure><p>运行<code>npx webpack</code> </p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251431236.png" alt="image-20220525143145094"></p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251430130.png" alt="image-20220525143015003"></p><p>将devtool改为上一个cheap-source-map</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251432226.png" alt="image-20220525143254121"></p><p>没法定位到源代码了。原因是因为使用cheap-source-map这个不包含loader到mapsource</p><p><strong>所以在开发环境里，推荐大家使用cheap-module-source-map</strong>不但可以帮助我们生成map文件，而且不记录列数，同时对第三方库混入进来也不会影响到source-map的生成后的代码识别问题。</p><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><h3 id="开启压缩"><a href="#开启压缩" class="headerlink" title="开启压缩"></a>开启压缩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./app.js&#x27;</span>,<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">static</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//配置压缩</span><br>    &#125;,<br><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251456765.png" alt="image-20220525145600643"></p><p>gzip可以减少网络带宽</p><h3 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    entry: <span class="hljs-string">&#x27;./app.js&#x27;</span>,<br>    devServer: &#123;<br>        <span class="hljs-keyword">static</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        compress: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//配置压缩</span><br>        port: <span class="hljs-number">3000</span>, <span class="hljs-comment">//这个时候的本地开发服务器就是 localhost:3000</span><br>    &#125;,<br><br>    plugins: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加响应头"><a href="#添加响应头" class="headerlink" title="添加响应头"></a>添加响应头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">static</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//这个时候的本地开发服务器就是 localhost:3000</span><br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;abc123&#x27;</span><br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251500854.png" alt="image-20220525150053783"></p><h3 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h3><p>网页访问某些接口，可能会有跨域问题，如果不做代理处理，那么开发服务器访问不了接口。</p><p>模拟个服务器，使用node去写个简单接口服务 创建个server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/api/hello&#x27;</span>) &#123;<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;hello node&#x27;</span>)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;localhost:9000&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>运行<code>node server.js</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251507862.png" alt="image-20220525150725783"></p><p>开启个端口为9000的服务</p><p>修改app.js 去请求上面启动的服务的接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:9000/api/hello&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">text</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251510988.png" alt="image-20220525151057883"></p><p>发生了跨域问题</p><p>将上面代码改下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/hello&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">text</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">static</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//这个时候的本地开发服务器就是 localhost:3000</span><br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;abc123&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:9000&#x27;</span><br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251513762.png" alt="image-20220525151355648"></p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devServer:</span> &#123;<br>        <span class="hljs-attr">static:</span> <span class="hljs-string">path.resolve(__dirname</span>, <span class="hljs-string">&#x27;./dist&#x27;</span><span class="hljs-string">)</span>,<br>        <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span>, <span class="hljs-string">//这个时候的本地开发服务器就是</span> <span class="hljs-string">localhost:3000</span><br>        <span class="hljs-attr">headers:</span> &#123;<br>            <span class="hljs-attr">&#x27;X-Access-Token&#x27;:</span> <span class="hljs-string">&#x27;abc123&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">proxy:</span> &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;http://localhost:9000&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">https:</span> <span class="hljs-literal">true</span> <br>    &#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>重新运行<code>npx webpack server</code></p><p>此时http:&#x2F;&#x2F; &#x3D;&gt; https:&#x2F;&#x2F; </p><p>但是，由于默认配置使用的是自签名证书，所以浏览器会告诉你是不安全的，但我们依然可以访问它，当然我们在配置中，配置自己的证书就不会出现这个问题了。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251519848.png" alt="image-20220525151943729"></p><h3 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h3><p>和http是一样的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">http2</span>: <span class="hljs-literal">true</span> <br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="historyApiFallback"><a href="#historyApiFallback" class="headerlink" title="historyApiFallback"></a>historyApiFallback</h3><p>When using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">HTML5 History API</a>, the <code>index.html</code> page will likely have to be served in place of any <code>404</code> responses. Enable <code>devServer.historyApiFallback</code> by setting it to <code>true</code></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>配置后，其他人的电脑在同一个局域网就可以访问到当前这个开发服务器了。</p><h2 id="模块热替换与热加载"><a href="#模块热替换与热加载" class="headerlink" title="模块热替换与热加载"></a>模块热替换与热加载</h2><ul><li><p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 模块，而无需重新加载整个页面。</p></li><li><p>热加载(文件更新时，自动刷新我们的服务和页面)新版的webpack-dev-server默认已经开启了热加载的功能。它对应的参数是devServer.liveReload，默认为true。注意，如果想要关掉它，要将liveReload设置为false的同时，也要关掉hot</p></li></ul><blockquote><p>注意点：配置的loader,会自动进行热替换，若没有配置相应loader的话</p><p>如引入个js文件，使用这个js时，去修改js，会导致这个资源文件的变化 </p><p><a href="https://webpack.js.org/api/hot-module-replacement/">https://webpack.js.org/api/hot-module-replacement/</a></p></blockquote><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i eslint -D<br></code></pre></td></tr></table></figure><p>使用eslint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx eslint --init <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251637866.png" alt="image-20220525163755722"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251638111.png" alt="image-20220525163820980"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251638135.png" alt="image-20220525163828010"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251638233.png" alt="image-20220525163840087"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251640876.png" alt="image-20220525164038739"></p><p>以JSON的格式生成eslint的配置文件，（可以选JavaScript、YAML这2个格式）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;es2021&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;airbnb-base&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parserOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;ecmaVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sourceType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>创建个src&#x2F;app.js</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251645989.png" alt="image-20220525164524859"></p><p>发现1警告、2错误</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251645513.png" alt="image-20220525164547396"></p><ul><li>不可以使用console</li><li>代码末位需要换行</li><li>每行代码需要分号</li></ul><p>可以修改eslint的配置去掉警告or错误</p><p>将上图红框内的no-console配置到eslint的json配置文件<code>.eslintrc.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;browser&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&quot;es2021&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-string">&quot;extends&quot;</span>: [<br>        <span class="hljs-string">&quot;airbnb-base&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;parserOptions&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;ecmaVersion&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>        <span class="hljs-string">&quot;sourceType&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;no-console&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//加入后，就不会警告了</span><br>    &#125;,<br>    <span class="hljs-string">&quot;globals&quot;</span>: &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>检查错误2个方式</p><ul><li><p>运行<code>npx eslint 目录</code></p></li><li><p>vscode安装eslint插件</p></li></ul><p>eslint与webpack配合使用</p><p>首先安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli webpack-dev-server html-webpack-plugin babel-loader eslint-webpack-plugin @babel/core  -D    <br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;eslint-webpack-plugin&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/app.js&#x27;</span>,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;babel-loader&#x27;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintPlugin</span>()],<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>当项目中js与eslint的配置不相符时，webpack就会直接报错</p><h2 id="git-hooks与husky"><a href="#git-hooks与husky" class="headerlink" title="git-hooks与husky"></a>git-hooks与husky</h2><h4 id="实现提交代码前检查代码"><a href="#实现提交代码前检查代码" class="headerlink" title="实现提交代码前检查代码"></a>实现提交代码前检查代码</h4><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251724859.png" alt="image-20220525172458780"></p><p>研究下git-hooks</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251729343.png" alt="image-20220525172938220"></p><p>hooks下定义git默认的hook。【hook：触发git命令前后会触发这些命令，这些命令是自动执行的，只要我们配置好，git会帮我们自动运行】</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251730985.png" alt="image-20220525173031860"></p><p>需求：代码提交前检查我们当前代码有没有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> pre-commit.sample<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs visual">#!/bin/sh<br>#<br># An example hook script to verify what is about to be committed.<br># Called by &quot;git commit&quot; with no arguments.  The hook should<br># exit with non-zero status after issuing an appropriate message if<br># it wants to stop the commit.<br>#<br># To enable this hook, rename this file to &quot;pre-commit&quot;.<br><br>if git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1<br>then<br>        against=HEAD<br>else<br>        # Initial commit: diff against an empty tree object<br>        against=$(git hash-object -t tree /dev/null)<br>fi<br><br># If you want to allow non-ASCII filenames set this variable to true.<br>allownonascii=$(git config --type=bool hooks.allownonascii)<br><br># Redirect output to stderr.<br>exec 1&gt;&amp;2<br><br># Cross platform projects tend to avoid non-ASCII filenames; prevent<br># them from being added to the repository. We exploit the fact that the<br># printable range starts at the space character and ends with tilde.<br>if [ &quot;$allownonascii&quot; != &quot;true&quot; ] &amp;&amp;<br>        # Note that the use of brackets around a tr range is ok here, (it&#x27;s<br>        # even required, for portability to Solaris 10&#x27;s /usr/bin/tr), since<br>        # the square bracket bytes happen to fall in the designated range.<br>        test $(git diff --cached --name-only --diff-filter=A -z $against |<br>          LC_ALL=C tr -d &#x27;[ -~]\0&#x27; | wc -c) != 0<br>then<br>        cat &lt;&lt;\EOF<br>Error: Attempt to add a non-ASCII file name.<br><br>This can cause problems if you want to work with people on other platforms.<br><br>To be portable it is advisable to rename the file.<br><br>If you know what you are doing you can disable this check using:<br><br>  git config hooks.allownonascii true<br>EOF<br>        exit 1<br>fi<br><br># If there are whitespace errors, print the offending file names and fail.<br>exec git diff-index --check --cached $against --<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> pre-commit<br>vim pre-commit<br></code></pre></td></tr></table></figure><p>写个输出语句</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs visual">echo pre-commit<br></code></pre></td></tr></table></figure><p>在当前文件随便修改下，然后再尝试提交。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251737649.png" alt="image-20220525173741569"></p><p>刚才那个<code>pre-commit</code>文件没有权限，提升下权限就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./pre-commit<br></code></pre></td></tr></table></figure><p>再次执行代码的提交</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251741433.png" alt="image-20220525174115368"></p><p>发现输出了<code>pre-commit</code></p><p>这次我们修改下pre-commit的内容</p><p><code>vim .git/hooks/pre-commit</code></p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs visual">npx eslint ./src<br></code></pre></td></tr></table></figure><p>改成我们在终端写的命令</p><p>然后我们将src&#x2F;app.js修改为eslint不通过的版本，再接着试下提交代码</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205251745492.png" alt="image-20220525174557419"></p><p>发现提交不了，原因是eslint不通过，</p><p>所以在团队开发时，定义一套eslint规范，当提交代码前，验证通不通过规范，保证团队代码的规范与整洁</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>每次都要开发人员自己去修改.git&#x2F;hooks&#x2F;xxxx文件太麻烦了</p><p>创建我们定义的文件</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252036845.png" alt="image-20220525203524920"></p><p>配置git的hooksPath为当前目录的.myGitHooks</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252048587.png" alt="image-20220525204823490"></p><p>同样给我们创建的pre-commit提升权限，修改我们的app.js为不可以通过eslint的版本</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252047617.png"></p><p>上面的操作都是手工去操作的，太麻烦了，可以使用husky工具帮我们完成</p><h4 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h4><p>先把上面自己自定义的hooksPath给删掉，<code>vim .git/config</code>编辑下删除</p><p>安装husky依赖    <a href="https://typicode.github.io/husky/#/?id=manual">husky官网教程</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i husky -D<br><br>npx husky install<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252056115.png" alt="image-20220525205650025"></p><p>在package.json的scripts内创建husky install</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252058360.png" alt="image-20220525205846282"></p><p>在.husky文件夹下创建我们的hook</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252101845.png" alt="image-20220525210102772"></p><p>将app.js 修改为eslint通不过的版本</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252105435.png" alt="image-20220525210558380"></p><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>首先手工配置.git&#x2F;hook&#x2F;pre-commit文件做到提交前检查代码，接着优化成使用我们自己创建的文件<code>.myGitHooks/pre-commit</code>去完成提交前检查代，最后使用husky工具，帮助我们简化操作上面的操作方式。</p><ul><li>安装husky开发依赖，</li><li><code>package.json</code>加入<code>prepare</code>脚本，</li><li>添加自定义文件<code>pre-commit</code>，</li><li>提升权限，</li><li>不用我们自己去配置hooksPath的指向目录。</li></ul><h2 id="模块与依赖"><a href="#模块与依赖" class="headerlink" title="模块与依赖"></a>模块与依赖</h2><h3 id="webpack模块"><a href="#webpack模块" class="headerlink" title="webpack模块"></a>webpack模块</h3><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252116129.png" alt="image-20220525211627050"></p><p>这些都认为是webpack可以应用的模块（ECMAScript模块、CommonJS模块、AMD模块、Assets模块）</p><p>通过loader我们发现webpack可以处理多种语言和预处理的语法来变成模块，并且将这些相关依赖引入bundle中</p><p>原生支持的模块、和loader处理的模块 都认为是webpack的模块</p><h4 id="webpack模块解析简易原理"><a href="#webpack模块解析简易原理" class="headerlink" title="webpack模块解析简易原理"></a>webpack模块解析简易原理</h4><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252123105.png" alt="image-20220525212304024"></p><h2 id="外部拓展"><a href="#外部拓展" class="headerlink" title="外部拓展"></a>外部拓展</h2><p>使用webpack的externals属性将项目内一些<strong>模块名称</strong>可以作为外部拓展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./app.js&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>    <span class="hljs-attr">externals</span>: &#123;<br>        <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;jQuery&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($);<br></code></pre></td></tr></table></figure><p>因为没有引入jQuery的cdn所以页面会报错</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252152334.png" alt="image-20220525215254243"></p><p>创建index.html，并且引入jQuery的cdn</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再修改下webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span><br>        &#125;)<br>    ],<br></code></pre></td></tr></table></figure><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252155581.png" alt="image-20220525215517496"></p><p>成功引入了。</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>每次都要手动去引入外部的cdn链接，太麻烦，能不能让webpack自动去引入</p><p>操作：</p><ul><li>删除index.html</li><li>删除HtmlWebpackPlugin内配置的template</li><li>修改externals</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252159510.png" alt="image-20220525215918428"></p><p>运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252201010.png" alt="image-20220525220105927"></p><p>这是因为上面引入的cdn，我们没有告诉webpack它要以什么形式这拿这个cdn资源</p><p><strong>修改webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">externalsType</span>: <span class="hljs-string">&#x27;script&#x27;</span>,<br>  <span class="hljs-attr">externals</span>: &#123;<br>      <span class="hljs-attr">jquery</span>: [<br>          <span class="hljs-string">&#x27;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&#x27;</span>,<br>          <span class="hljs-string">&#x27;$&#x27;</span><br>      ]<br>  &#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>npx webpack server</code></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252203125.png" alt="image-20220525220338036"></p><p>成功引入！</p><p>达到了缩小打包体积大小，降低首屏加载时间！</p><h2 id="依赖图分析"><a href="#依赖图分析" class="headerlink" title="依赖图分析"></a>依赖图分析</h2><p>每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。这使得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依赖提供给应用程序。当 webpack 开始工作时，它会根据我们写好的配置,从 入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。<br>单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。</p><p><strong>bundle 分析(bundle analysis)</strong> 工具：</p><p><strong>官方分析工具</strong> 是一个不错的开始。还有一些其他社区支持的可选项：</p><ul><li>webpack-chart:webpack stats 可交互饼图。</li><li>webpackvisualizer：可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。</li><li>webpack-bundle-analyzer： 一个 plugin 和CLI工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的<br>树状图形式。</li><li>webpack bundle optimize helper：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的<br>大小。</li><li>bundle-stats：生成一个 bundle 报告 (bundle 大小、资源、模块)，并比较不同构建之间的结果。</li></ul><p> 安装webpack-bundle-analyzer依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i webpack-bundle-analyzer-D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">BundleAnalyzerPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-bundle-analyzer&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">app</span>: <span class="hljs-string">&#x27;./src/app.js&#x27;</span>,<br>        <span class="hljs-attr">app2</span>: <span class="hljs-string">&#x27;./src/app2.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>()<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>stat、parsed、Gzipped 3个按钮</p><p>每个按钮都有不同含义</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252223683.png" alt="image-20220525222335621"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205252224283.png" alt="image-20220525222309218"></p><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><h3 id="PostCSS与CSS模块"><a href="#PostCSS与CSS模块" class="headerlink" title="PostCSS与CSS模块"></a>PostCSS与CSS模块</h3><p>Postcss 是一个用 JavaScript 工具和插件转换CSS 代码的工具。比如可以使用 Autoprefixer 插件自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮我们自动的为 CSS 规则添加前缀，将最新的 CSS 语法转换成大多数浏览器都能理解的语法。</p><p>css 模块 能让你永远不用担心命名太大众化而造成冲突，只要用最有意义的名字就行了。</p><p>app.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install postcss-loader -D<br>npm install autoprefixer -D<br></code></pre></td></tr></table></figure><p>在根目录新建postcss.config.js文件，使用autoprefixer插件</p><h4 id="autoprefixer"><a href="#autoprefixer" class="headerlink" title="autoprefixer"></a>autoprefixer</h4><blockquote><p>PostCSS插件，用于解析CSS，并使用我可以使用的值将供应商前缀添加到CSS规则。它也是由谷歌推荐的，并在Twitter和阿里巴巴使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在package.json加入配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;browserslist&quot;</span>: [<br>  <span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-regexp">//</span>世界上大于<span class="hljs-number">1</span>%的浏览器<br>  <span class="hljs-string">&quot;last 2 version&quot;</span> <span class="hljs-regexp">//</span>最后<span class="hljs-number">2</span>个版本<br>]<br></code></pre></td></tr></table></figure><p>运行webpack server</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261100336.png" alt="image-20220526110037237"></p><p>可以看到已经加入了每个浏览器适配的css语法</p><p>安装<code>postcss-nested</code>依赖，可以在css内写嵌套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install postcss-nested -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>),<br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-nested&#x27;</span>)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>CSS本身就不支持嵌套写法</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261130275.png" alt="image-20220526113016199"></p><p>vsCode报错了，但是我们使用了postcss-nested插件帮助我们解析这种嵌套的写法，运行webpack server</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261130255.png" alt="image-20220526113005126"></p><p>这是postcss-nested帮我们解析后的结果</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>要是在别的css中也写了个.box这样就会冲突了。使用CSS模块来解决</p><p>修改webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>       <span class="hljs-attr">rules</span>: [<br>           &#123;<br>               <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>               <span class="hljs-attr">use</span>: [<br>                   <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>                   &#123;<br>                       <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>                       <span class="hljs-attr">options</span>: &#123;<br>                           <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>                       &#125;<br>                   &#125;,<br>                   <span class="hljs-string">&#x27;postcss-loader&#x27;</span><br>               ]<br>           &#125;<br>       ]<br>   &#125;<br></code></pre></td></tr></table></figure><p>重新运行webpack server，发现样式失效了</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261151289.png" alt="image-20220526115139158"></p><p>原因：css类名 变成了随机值，肯定样式不起作用了。</p><p>修改app.js引入css的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;./app.css&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(style); <span class="hljs-comment">//打印一下</span><br><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(style.<span class="hljs-property">box</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261313517.png" alt="image-20220526131338386"></p><p>样式就恢复好了。（React也是这样的类似写法）</p><p>也可以开启CSS模块模式，比如全局样式可以冠以<code>.global</code>前缀，如：</p><ul><li><p>*.global.css        css普通模式</p></li><li><p>*.css                    css module模式</p></li></ul><p>这里统一用global关键字进行识别。用正则表达式匹配文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>         <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^(?!.*\\.global).*\\.css$`</span>),  <span class="hljs-comment">//global.css 文件加入css模块化</span><br>         <span class="hljs-attr">use</span>: [<br>             <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>             &#123;<br>                 <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>                 <span class="hljs-attr">options</span>: &#123;<br>                     <span class="hljs-attr">modules</span>: &#123;<br>                         <span class="hljs-attr">localIdentName</span>: <span class="hljs-string">&#x27;[hash:base64:6]&#x27;</span><br>                     &#125;<br>                 &#125;<br>             &#125;,<br>             <span class="hljs-string">&#x27;postcss-loader&#x27;</span><br>         ]<br>     &#125;,<br>     &#123;<br>         <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^(.*\\.global).*\\.css$`</span>), <span class="hljs-comment">// 普通css 普通模式</span><br>         <span class="hljs-attr">use</span>: [<br>             <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>             <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>             <span class="hljs-string">&#x27;postcss-loader&#x27;</span><br>         ]<br>     &#125;,<br></code></pre></td></tr></table></figure><p>test.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.test1</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>test.global.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.test12</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;./app.css&#x27;</span><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.css&#x27;</span><br><span class="hljs-keyword">import</span> testGlobal <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.global.css&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(style);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(testGlobal);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261326230.png" alt="image-20220526132658089"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261327251.png" alt="image-20220526132712122"></p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>使用postcss可以帮我们把css解析为一个抽象语法树，调用一些插件处理这个抽象树，并添加一些特殊的功能。</p><p>为了防止css名称冲突，在css-loader中配置module为true，开启css模块化功能</p><h3 id="Web-Works"><a href="#Web-Works" class="headerlink" title="Web Works"></a>Web Works</h3><p>html5新特性，将负责、耗时的操作放到浏览器后台进程去处理，不影响JS主线程UI的渲染</p><p>webpack5内置了这个功能</p><p>创建work.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// web works</span><br><br>self.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>    self.<span class="hljs-title function_">postMessage</span>(&#123;<br>        <span class="hljs-attr">answer</span>: <span class="hljs-number">1111</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>创建app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./work.js&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br><br>worker.<span class="hljs-title function_">postMessage</span>(&#123;<br>    <span class="hljs-attr">question</span>: <span class="hljs-string">&quot;hi, how many the luck num today?&quot;</span><br>&#125;)<br><br>worker.<span class="hljs-property">onmessage</span> = <span class="hljs-function"><span class="hljs-params">message</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>)<br></code></pre></td></tr></table></figure><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install typescript ts-loader -D<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/app.ts&#x27;</span>,<br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;inline-source-map&#x27;</span>,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>                <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>编写src&#x2F;app.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">12</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br></code></pre></td></tr></table></figure><p>运行webpack server</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261510405.png" alt="image-20220526151052257"></p><p>执行<code>npx tsc --init</code></p><p>在根目录下生成tsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span><br><br>    <span class="hljs-comment">/* Projects */</span><br>    <span class="hljs-comment">// &quot;incremental&quot;: true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */</span><br>    <span class="hljs-comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span><br>    <span class="hljs-comment">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* Specify the path to .tsbuildinfo incremental compilation file. */</span><br>    <span class="hljs-comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */</span><br>    <span class="hljs-comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span><br>    <span class="hljs-comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span><br><br>    <span class="hljs-comment">/* Language and Environment */</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es2016&quot;</span><span class="hljs-punctuation">,</span>                                  <span class="hljs-comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span><br>    <span class="hljs-comment">// &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span><br>    <span class="hljs-comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */</span><br>    <span class="hljs-comment">// &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */</span><br>    <span class="hljs-comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */</span><br>    <span class="hljs-comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27;. */</span><br>    <span class="hljs-comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span><br>    <span class="hljs-comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using &#x27;jsx: react-jsx*&#x27;. */</span><br>    <span class="hljs-comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for &#x27;createElement&#x27;. This only applies when targeting &#x27;react&#x27; JSX emit. */</span><br>    <span class="hljs-comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span><br>    <span class="hljs-comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span><br>    <span class="hljs-comment">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* Control what method is used to detect module-format JS files. */</span><br><br>    <span class="hljs-comment">/* Modules */</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commonjs&quot;</span><span class="hljs-punctuation">,</span>                                <span class="hljs-comment">/* Specify what module code is generated. */</span><br>    <span class="hljs-attr">&quot;rootDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./src&quot;</span><span class="hljs-punctuation">,</span>                                  <span class="hljs-comment">/* Specify the root folder within your source files. */</span><br>    <span class="hljs-comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* Specify how TypeScript looks up a file from a given module specifier. */</span><br>    <span class="hljs-comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span><br>    <span class="hljs-comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span><br>    <span class="hljs-comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span><br>    <span class="hljs-comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like &#x27;./node_modules/@types&#x27;. */</span><br>    <span class="hljs-comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span><br>    <span class="hljs-comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span><br>    <span class="hljs-comment">// &quot;moduleSuffixes&quot;: [],                             /* List of file name suffixes to search when resolving a module. */</span><br>    <span class="hljs-comment">// &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files. */</span><br>    <span class="hljs-comment">// &quot;noResolve&quot;: true,                                /* Disallow &#x27;import&#x27;s, &#x27;require&#x27;s or &#x27;&lt;reference&gt;&#x27;s from expanding the number of files TypeScript should add to a project. */</span><br><br>    <span class="hljs-comment">/* JavaScript Support */</span><br>    <span class="hljs-comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span><br>    <span class="hljs-comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span><br>    <span class="hljs-comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from &#x27;node_modules&#x27;. Only applicable with &#x27;allowJs&#x27;. */</span><br><br>    <span class="hljs-comment">/* Emit */</span><br>    <span class="hljs-comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span><br>    <span class="hljs-comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span><br>    <span class="hljs-comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span><br>    <span class="hljs-comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span><br>    <span class="hljs-comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If &#x27;declaration&#x27; is true, also designates a file that bundles all .d.ts output. */</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span>                                   <span class="hljs-comment">/* Specify an output folder for all emitted files. */</span><br>    <span class="hljs-comment">// &quot;removeComments&quot;: true,                           /* Disable emitting comments. */</span><br>    <span class="hljs-comment">// &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */</span><br>    <span class="hljs-comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span><br>    <span class="hljs-comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types. */</span><br>    <span class="hljs-comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span><br>    <span class="hljs-comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span><br>    <span class="hljs-comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span><br>    <span class="hljs-comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span><br>    <span class="hljs-comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span><br>    <span class="hljs-comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span><br>    <span class="hljs-comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span><br>    <span class="hljs-comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have &#x27;@internal&#x27; in their JSDoc comments. */</span><br>    <span class="hljs-comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like &#x27;__extends&#x27; in compiled output. */</span><br>    <span class="hljs-comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span><br>    <span class="hljs-comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing &#x27;const enum&#x27; declarations in generated code. */</span><br>    <span class="hljs-comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span><br>    <span class="hljs-comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span><br><br>    <span class="hljs-comment">/* Interop Constraints */</span><br>    <span class="hljs-comment">// &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span><br>    <span class="hljs-comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                             <span class="hljs-comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;allowSyntheticDefaultImports&#x27; for type compatibility. */</span><br>    <span class="hljs-comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span><br>    <span class="hljs-attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">/* Ensure that casing is correct in imports. */</span><br><br>    <span class="hljs-comment">/* Type Checking */</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                                      <span class="hljs-comment">/* Enable all strict type-checking options. */</span><br>    <span class="hljs-comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied &#x27;any&#x27; type. */</span><br>    <span class="hljs-comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account &#x27;null&#x27; and &#x27;undefined&#x27;. */</span><br>    <span class="hljs-comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span><br>    <span class="hljs-comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods match the original function. */</span><br>    <span class="hljs-comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span><br>    <span class="hljs-comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when &#x27;this&#x27; is given the type &#x27;any&#x27;. */</span><br>    <span class="hljs-comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Default catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span><br>    <span class="hljs-comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span><br>    <span class="hljs-comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when local variables aren&#x27;t read. */</span><br>    <span class="hljs-comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read. */</span><br>    <span class="hljs-comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span><br>    <span class="hljs-comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span><br>    <span class="hljs-comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span><br>    <span class="hljs-comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Add &#x27;undefined&#x27; to a type when accessed using an index. */</span><br>    <span class="hljs-comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span><br>    <span class="hljs-comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type. */</span><br>    <span class="hljs-comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span><br>    <span class="hljs-comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span><br><br>    <span class="hljs-comment">/* Completeness */</span><br>    <span class="hljs-comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span><br>    <span class="hljs-attr">&quot;skipLibCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span>                                 <span class="hljs-comment">/* Skip type checking all .d.ts files. */</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>将需要的配置打开。这里只开启了<code>rootDir</code> 和 <code>outDir</code> 这2个配置</p><p>引入lodash依赖，发现ts引入第三方依赖都需要定义个模块的概念</p><p><a href="https://www.typescriptlang.org/dt/search?search=lodash">搜索模块</a> 进入后搜索相应依赖的模块，进行安装</p><h3 id="多页面应用"><a href="#多页面应用" class="headerlink" title="多页面应用"></a>多页面应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app2.js&#x27;</span>, <span class="hljs-string">&#x27;./src/app.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">lodash</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261542858.png" alt="image-20220526154230759"></p><p> 创建个app3.js 并引入lodash依赖 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app2.js&#x27;</span>, <span class="hljs-string">&#x27;./src/app.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">main2</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app3.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">lodash</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261544684.png" alt="image-20220526154451604"></p><p>打包后的html文件</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205261550802.png" alt="image-20220526155021713"></p><p>能不能将mian.js放在一个html、main2.js放在另外一个html </p><p>先在根目录创建个<code>index.html</code>，修改webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;多页面应用功能&#x27;</span>, <span class="hljs-comment">// index.html 页面内可以使用ejs语法注入这个变量 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-comment">// 定义注入的位置</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;main&#x27;</span>], <span class="hljs-comment">//使用entry对象中哪些chunk</span><br>        &#125;)<br>    ],<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app2.js&#x27;</span>, <span class="hljs-string">&#x27;./src/app.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">main2</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app3.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">lodash</span>: <span class="hljs-string">&#x27;lodash&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置，还是单页面，只是我们可以指定哪些chunk注入到哪个html文件的位置，按照这个思路，我们在新建个HtmlWebpackPlugin就行啦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;多页面应用功能&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-comment">// 定义注入的位置</span><br>        &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index2.html&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span>,<br>        &#125;)<br>    ]<br></code></pre></td></tr></table></figure><p>现在先不指定chunk，看看默认webpack如何运行，但是运行报错了，原因是我们2个html打包后都叫同一个名称<code>index.html</code>，修改配置文件，再试试。</p><p>打包完成后，发现2个html的引入js文件都是一样的。都是entry的3个 <code>main</code>, <code>main2</code>, <code>lodash</code></p><p>创建个index2.html，并且修改下webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;多页面应用功能&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-comment">// 定义注入的位置</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;chanel1/index.html&#x27;</span>, <span class="hljs-comment">//配置html生成后的打包路径</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;main&#x27;</span>, <span class="hljs-string">&#x27;lodash&#x27;</span>] <span class="hljs-comment">// 使用main和lodash这个2个chunk</span><br>        &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index2.html&#x27;</span>,<br>            <span class="hljs-attr">inject</span>: <span class="hljs-string">&#x27;body&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;chanel2/index2.html&#x27;</span>, <span class="hljs-comment">//配置html生成后的打包路径</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;main2&#x27;</span>, <span class="hljs-string">&#x27;lodash&#x27;</span>] <span class="hljs-comment">// 使用main2和lodash这个2个chunk</span><br>        &#125;)<br>    ],<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app2.js&#x27;</span>, <span class="hljs-string">&#x27;./src/app.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;chanel1/[name].js&#x27;</span> <span class="hljs-comment">//配置js生成后的打包路径</span><br>        &#125;,<br>        <span class="hljs-attr">main2</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;./src/app3.js&#x27;</span>],<br>            <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;lodash&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;chanel2/[name].js&#x27;</span> <span class="hljs-comment">////配置js生成后的打包路径 </span><br>        &#125;,<br>        <span class="hljs-attr">lodash</span>: &#123;<br>            <span class="hljs-attr">import</span>: [<span class="hljs-string">&#x27;lodash&#x27;</span>],<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;common/[name].js&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/app.js&#x27;</span>,<br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;inline-source-map&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>    <span class="hljs-attr">optimization</span>: &#123;<br>        <span class="hljs-attr">usedExports</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建math.js 与 app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">minus</span> = (<span class="hljs-params">x, y</span>) =&gt; x - y<br><span class="hljs-comment">// app.js</span><br><span class="hljs-keyword">import</span> &#123; add, minus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));<br></code></pre></td></tr></table></figure><p>运行<code>npx webpack</code>打包整个代码</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205262050464.png" alt="image-20220526205056364"></p><p>发现minus没有使用到，因为app.js 只使用了add方法，达到目的</p><p>修改下webpack.config.js为生产环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/app.js&#x27;</span>,<br>    <span class="hljs-comment">// devtool: &#x27;inline-source-map&#x27;,</span><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()<br>    ],<br>    <span class="hljs-attr">optimization</span>: &#123;<br>        <span class="hljs-attr">usedExports</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现打包后的代码 .&#x2F;dist&#x2F;main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>)&#125;)();<br></code></pre></td></tr></table></figure><p>说明webpack帮我们优化到了极致，这个时候这变成了一行代码了。</p><p>那么引入第三方库呢，如lodash</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全部引入</span><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><span class="hljs-comment">// 部分引入</span><br><span class="hljs-keyword">import</span> &#123;get&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br></code></pre></td></tr></table></figure><p>测试发现，上面的两种引入方式，不管你是否使用，都会把整个lodash打包进来。</p><p>这是因为lodash是通过moduls.<a href="https://so.csdn.net/so/search?q=exports&spm=1001.2101.3001.7020">exports</a> &#x3D; _这种方式导出的。</p><p>还好lodash提供了按需引入模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> get <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/get&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面的方式引入，只会引入get.js文件，其它模块都不会加载进来。</p><h3 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a>sideEffects</h3><p>若开启，则引入css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./xxxx.css&#x27;</span><br></code></pre></td></tr></table></figure><p>会起作用</p><p>修改package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;*.css&quot;</span> <span class="hljs-punctuation">,</span><span class="hljs-string">&quot;*.scss&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;*.global.js&quot;</span>...<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 所有引入没使用的，都会被排除掉</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 所有引入没使用的，都不会被排除掉</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果不需要某些文件被 webpack 清除，可以在 package.json 中配置 sideEffects 属性</p><h3 id="渐进式网络应用程序-PWA"><a href="#渐进式网络应用程序-PWA" class="headerlink" title="渐进式网络应用程序 PWA"></a>渐进式网络应用程序 PWA</h3><h3 id="shimming-预置依赖"><a href="#shimming-预置依赖" class="headerlink" title="shimming 预置依赖"></a>shimming 预置依赖</h3><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">ProvidePlugin</span>(&#123;<br>            <span class="hljs-attr">_</span>: <span class="hljs-string">&#x27;lodash&#x27;</span> <span class="hljs-comment">//将lodash放在全局依赖下</span><br>        &#125;)<br>    ],<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs index.js">// import _ from &#x27;lodash&#x27;<br>console.log(_.join([&#x27;hello&#x27;, &#x27;Zoe&#x27;], &#x27; &#x27;));<br></code></pre></td></tr></table></figure><p>去掉import引入lodash的语句，直接使用<code>_</code>，运行webpack，打包完成～</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205271012605.png" alt="image-20220527101229462"></p><p>可以看出lodash的大小在打包后的main.js内</p><h4 id="细粒度-Shimming"><a href="#细粒度-Shimming" class="headerlink" title="细粒度 Shimming"></a>细粒度 Shimming</h4><p>修改index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行webpack server</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205271029332.png" alt="image-20220527102906238"></p><p>修改webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/index.js&#x27;</span>), <span class="hljs-comment">// 解析到./src/index.js使用下面的loader去处理</span><br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;imports-loader?wrapper=window&#x27;</span>, <span class="hljs-comment">// 将当前的this指向window对象</span><br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205271032174.png" alt="image-20220527103203033"></p><h3 id="全局exports"><a href="#全局exports" class="headerlink" title="全局exports"></a>全局exports</h3><p>项目内创建个globals.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> file = <span class="hljs-string">&#x27;example.txt&#x27;</span><br><br><span class="hljs-keyword">const</span> helpers = &#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;test something&#x27;</span>);<br>    &#125;,<br><br>    <span class="hljs-attr">parse</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;parse something&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只使用这个文件的某个方法，不需要导入整个文件。</p><p>安装exports-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install exports-loader -D<br></code></pre></td></tr></table></figure><p>配置webpack.config.js.     <a href="https://webpack.js.org/loaders/exports-loader/">exports-loader官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/globals.js&#x27;</span>),<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;exports-loader?type=commonjs&amp;exports=file,multiple|helpers.parse|parse&#x27;</span><br>            &#125;<br><br><span class="hljs-comment">// =&gt; </span><br>&#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/globals.js&#x27;</span>),<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;exports-loader&#x27;</span>,<br>                <span class="hljs-attr">options</span>: &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;commonjs&#x27;</span>,<br>                    <span class="hljs-attr">exports</span>: [<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;multiple helpers.parse parse&#x27;</span>]<br>                &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>业务代码中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; file, parse &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./globals&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);<br><span class="hljs-title function_">parse</span>()<br></code></pre></td></tr></table></figure><p>将不同模块的js库，以commonjs的形式进行导入，并只使用里面在webpack.config.js里面exports的相应变量名称</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205271042701.png" alt="image-20220527104235607"></p><h3 id="加载polyfills"><a href="#加载polyfills" class="headerlink" title="加载polyfills"></a>加载polyfills</h3><p>创建src&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@babel/polyfill&#x27;</span><br><span class="hljs-comment">// Array.from不是所有浏览器都支持的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + x));<br></code></pre></td></tr></table></figure><p>创建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行webpack打包发现打包出来main.js多了些浏览器兼容的代码，保证了向下兼容</p><h4 id="优化polyfills"><a href="#优化polyfills" class="headerlink" title="优化polyfills"></a>优化polyfills</h4><p>不建议使用 <code>import @babel/polyfill</code>。因为这样做的缺点是会全局引入整个 polyfill包，比如 Array.from 会全局引入，不但包的体积大，而且还会污染全局环境。</p><p>babel-preset-env package 通过 browserslist 来转译那些你浏览器中不支持的特性。这个 preset 使用useBuiltIns 选项，默认值是 false，这种方式可以将全局 babel-polyfill 导入，改进为更细粒度的import 格式：</p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-loader @babel/core @babel/preset-env -D  <br>npm install core-js@3 -D<br></code></pre></td></tr></table></figure><p>修改webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<br>              [<br>                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                &#123;<br>                  <span class="hljs-attr">targets</span>: [<span class="hljs-string">&quot;last 1 version&quot;</span>, <span class="hljs-string">&quot;&gt; 1%&quot;</span>],<br>                  <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&quot;usage&quot;</span>,<br>                  <span class="hljs-attr">corejs</span>: <span class="hljs-number">3</span>,<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="创建library"><a href="#创建library" class="headerlink" title="创建library"></a>创建library</h3><p>创建<code>src/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y<br></code></pre></td></tr></table></figure><p>创建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;mylib.js&#x27;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现打包的mylib.js是空的，因为production模式下默认会排除掉没有使用的代码，加入library属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;mylib.js&#x27;</span>,<br>        <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;mylib&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的写法支持script引入的</p><p>改为commonjs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;mylib.js&#x27;</span>,<br>        <span class="hljs-attr">library</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;mylib&quot;</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;commonjs&quot;</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改为esModule</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">experiments</span>: &#123;<br>      <span class="hljs-attr">outputModule</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;mylib.js&#x27;</span>,<br>        <span class="hljs-attr">library</span>: &#123;<br>        <span class="hljs-comment">// name: &quot;mylib&quot;,</span><br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;module&quot;</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改为umd（支持commons、script、umd）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;mylib.js&#x27;</span>,<br>        <span class="hljs-attr">library</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;mylib&quot;</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;umd&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">globalObject</span>: <span class="hljs-string">&#x27;globalThis&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建一个lib轮子"><a href="#创建一个lib轮子" class="headerlink" title="创建一个lib轮子"></a>创建一个lib轮子</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli lodash -D<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs webpack.config.js">const path = require(&#x27;path&#x27;)<br>module.exports = &#123;<br>    mode: &#x27;production&#x27;,<br>    entry: &#x27;./src/index.js&#x27;,<br>    output: &#123;<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>        filename: &#x27;webpack-numbers.js&#x27;,<br>        library: &#123;<br>            name: &#x27;webpackNumbers&#x27;,<br>            type: &#x27;umd&#x27;<br>        &#125;,<br>        globalObject: &#x27;globalThis&#x27;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205282227861.png" alt="image-20220528222712712"></p><p>lodash都打到包了，但是不想整个都导入</p><p>使用<a href="https://webpack.docschina.org/configuration/externals/#externals">externals属性</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;webpack-numbers.js&#x27;</span>,<br>        <span class="hljs-attr">library</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;webpackNumbers&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;umd&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">globalObject</span>: <span class="hljs-string">&#x27;globalThis&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">externals</span>: &#123;<br>        <span class="hljs-attr">lodash</span>: &#123;<br>            <span class="hljs-attr">commonjs</span>: <span class="hljs-string">&#x27;lodash&#x27;</span>,<br>            <span class="hljs-attr">commonjs2</span>: <span class="hljs-string">&#x27;lodash&#x27;</span>,<br>            <span class="hljs-attr">amd</span>: <span class="hljs-string">&#x27;lodash&#x27;</span>,<br>            <span class="hljs-attr">root</span>: <span class="hljs-string">&#x27;_&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205282229082.png" alt="image-20220528222944938"></p><h4 id="发布到npm仓库"><a href="#发布到npm仓库" class="headerlink" title="发布到npm仓库"></a>发布到npm仓库</h4><p>首先在npm仓库注册这个的号，并登陆</p><p>在项目根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm adduser<br>// 输入用户名、密码、邮箱<br>// 登陆成功后<br>npm publish<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291305451.png" alt="image-20220529130511388"></p><p>自己的仓库多了个</p><p>创建个新的目录，尝试将我们刚发布上npm仓库的包拉下来使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> webpackNumbers = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;02-webpack-publish-demo&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(webpackNumbers);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291308306.png" alt="image-20220529130818228"></p><p>发现我们刚才打的包，package.json没有设置好。重新设置一下。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291310046.png" alt="image-20220529131056965"></p><p>发布上去后，将原来的根目录下的package.json修改下版本号就可以了。</p><h3 id="模块联邦-Module-Federation"><a href="#模块联邦-Module-Federation" class="headerlink" title="模块联邦(Module Federation)"></a>模块联邦(Module Federation)</h3><p>微前端的知识</p><p>创建3个webpack应用</p><table><thead><tr><th>Home</th><th>Nav</th><th>Search</th></tr></thead><tbody><tr><td><a href="http://localohost:3001/">http://localohost:3001</a></td><td><a href="http://localohost:3003/">http://localohost:3003</a></td><td><a href="http://localohost:3002/">http://localohost:3002</a></td></tr></tbody></table><h4 id="Nav"><a href="#Nav" class="headerlink" title="Nav"></a>Nav</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Header</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> header = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>    header.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;公共头部内容&#x27;</span><br>    <span class="hljs-keyword">return</span> header  <br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span> <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ModuleFederationPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>).<span class="hljs-property">container</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>:[<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModuleFederationPlugin</span>(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nav&#x27;</span>, <span class="hljs-comment">//名称</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;remoteEntry.js&#x27;</span>, <span class="hljs-comment">//外部应用引入这个应用时候，使用这个文件名</span><br>            <span class="hljs-attr">remotes</span>: &#123;&#125;,<br>            <span class="hljs-attr">exposes</span>: &#123;<br>                <span class="hljs-string">&#x27;./Header&#x27;</span>: <span class="hljs-string">&#x27;./src/Header.js&#x27;</span>, <span class="hljs-comment">// 导出的组件</span><br>            &#125;,<br>            <span class="hljs-attr">shared</span>: &#123;&#125;<br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291518013.png" alt="image-20220529151843957"></p><h4 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h4><p>引用nav应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">HomeList</span> = (<span class="hljs-params">num</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&lt;ul&gt;&#x27;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-comment">// str += `&lt;li&gt;item$&#123;num&#125;&lt;/li&gt;`</span><br>        str += <span class="hljs-string">&#x27;&lt;li&gt;item&#x27;</span>+ i +<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span><br>    &#125;<br>    str += <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> str<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeList</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ModuleFederationPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>).<span class="hljs-property">container</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>:[<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModuleFederationPlugin</span>(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;remoteEntry.js&#x27;</span>,<br>            <span class="hljs-attr">remotes</span>: &#123;<br>                <span class="hljs-attr">nav</span>: <span class="hljs-string">&#x27;nav@http://localhost:3003/remoteEntry.js&#x27;</span>,<br>            &#125;,<br>            <span class="hljs-attr">exposes</span>: &#123;<br>                <span class="hljs-string">&#x27;./HomeList&#x27;</span>: <span class="hljs-string">&#x27;./src/HomeList.js&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">shared</span>: &#123;&#125;<br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./HomeList&#x27;</span><br><span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;nav/Header&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">Header</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    body.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Header</span>.<span class="hljs-title function_">default</span>())<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(body)<br>    body.<span class="hljs-property">innerHTML</span> += <span class="hljs-title function_">a</span>(<span class="hljs-number">5</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291519024.png" alt="image-20220529151919976"></p><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>引用nav与home应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;nav/Header&#x27;</span>), <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;home/HomeList&#x27;</span>)])<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[</span></span><br><span class="hljs-params"><span class="hljs-function">        &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">default</span>: Header</span></span><br><span class="hljs-params"><span class="hljs-function">        &#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">        &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">default</span>: HomeList</span></span><br><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><br><span class="hljs-params"><span class="hljs-function">    ]</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Header</span>())<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-title class_">HomeList</span>(<span class="hljs-number">3</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ModuleFederationPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>).<span class="hljs-property">container</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>:[<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModuleFederationPlugin</span>(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;search&#x27;</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;remoteEntry.js&#x27;</span>,<br>            <span class="hljs-attr">remotes</span>: &#123;<br>                <span class="hljs-attr">nav</span>: <span class="hljs-string">&#x27;nav@http://localhost:3003/remoteEntry.js&#x27;</span>,<br>                <span class="hljs-attr">home</span>: <span class="hljs-string">&#x27;home@http://localhost:3001/remoteEntry.js&#x27;</span><br>            &#125;<br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291520476.png" alt="image-20220529152048417"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>search应用导入nav应用  </p><p><code>import(&#39;nav/Header&#39;)</code>这个语句中 nav Header 怎么来的？</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291523708.png" alt="image-20220529152356649"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205291523658.png" alt="image-20220529152324584"></p><h3 id="提升构建性能"><a href="#提升构建性能" class="headerlink" title="提升构建性能"></a>提升构建性能</h3><ul><li>通过webpack来提升项目性能（网站的首屏时间，用于C端用户）</li><li>提升编译性能（提高打包速度，降低打包时间，用于开发人员）下面的内容的关于这种</li></ul><p>三个环境提升构建性能</p><ul><li>通用环境</li><li>开发环境</li><li>生产环境</li></ul><h5 id="通用环境"><a href="#通用环境" class="headerlink" title="通用环境"></a>通用环境</h5><ol><li><p>提升环境版本，webpack、node版本</p></li><li><p>将loader应用于最少数量的必要模块</p></li><li><p>引导</p><ul><li>每个额外的loader、plugin都有启动时间，尽量少用</li></ul></li><li><p>解析</p><ul><li>减少 resolve.modules, resolve.extensions,resolve.mainFiles, resolve.descriptionFiles 中条目数量，因为他们会增加文件系统调用的次数。</li><li>如果你不使用 symlinks（例如 npm link 或者 yarn link），可以设置 resolve.symlinks: false。</li><li>如果你使用自定义 resolve plugin 规则，并且没有指定 context上下文，可以设置 resolve.cache WithContext: false。</li></ul></li><li><p>小就是快</p></li></ol><p>   减少编译结果的整体大小，以提高构建性能。尽量保持 chunk 体积小。</p><ul><li>使用数量更少&#x2F;体积更小的 library。</li><li>在多页面应用程序中使用 SplitChunksPlugin。</li><li>在多页面应用程序中使用 SplitChunksPlugin，并开启 async 模式。</li><li>移除未引用代码。</li><li>只编译你当前正在开发的那些代码。</li></ul><ol start="6"><li><p>持久化缓存</p><ul><li>在webpack 配置中使用 cache 选项。使用 packagejson 中的”postinstall” 清除缓存目录。</li><li>将 cache 类型设置为内存或者文件系统。memory选项很简单，它告诉 webpack 在内存中存储缓存，不允许额外的配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">cache</span>: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;memory&#x27;</span>,<br>  &#125;，<br>&#125;；<br></code></pre></td></tr></table></figure></li><li><p>自定义loader&#x2F;plugin</p></li><li><p>dll</p></li><li><p>worker池（worker pool）</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>打包工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/22/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/05/22/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/20/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/05/20/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AF%95%E9%A2%98/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/20/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E5%BC%80%E6%94%BE%E9%A2%98/%E5%BC%80%E6%94%BE%E9%A2%98/"/>
    <url>/2022/05/20/%E5%B7%A5%E4%BD%9C%E5%8C%BA/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/%E5%BC%80%E6%94%BE%E9%A2%98/%E5%BC%80%E6%94%BE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205201000089.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组去重的方法</title>
    <link href="/2022/05/18/JavaScript/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/18/JavaScript/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="个人理解写"><a href="#个人理解写" class="headerlink" title="个人理解写"></a>个人理解写</h1><p>双循环</p><p>原数组排序后，邻近数组去重，push</p><p>使用indexOf （ES5）或者includes （ES6）</p><p>使用set</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> mOriginArray = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><br>mOriginArray.<span class="hljs-title function_">sort</span>()<br><br><br><span class="hljs-keyword">let</span> swapArray = []<br><br>mOriginArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(swapArray.<span class="hljs-property">length</span> != <span class="hljs-number">0</span> &amp;&amp; swapArray[index - <span class="hljs-number">1</span>] === item) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    swapArray.<span class="hljs-title function_">push</span>(item)<span class="hljs-comment">//切记不能用swapArray[index] = item</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// mOriginArray.forEach(item =&gt; &#123;</span><br><span class="hljs-comment">//   if(!swapArray.includes(item)) &#123;</span><br><span class="hljs-comment">//       swapArray.push(item)</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// let mSet = new Set(mOriginArray)</span><br><br><span class="hljs-comment">// console.log(Array.from(mSet))</span><br><span class="hljs-comment">// console.log([...mSet])</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(swapArray)<br></code></pre></td></tr></table></figure><h1 id="7种方法实现数组去重"><a href="#7种方法实现数组去重" class="headerlink" title="7种方法实现数组去重"></a>7种方法实现数组去重</h1><p>2018年05月05日 16:01 ·  阅读 50540</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去重是开发中经常会碰到的一个热点问题，不过目前项目中碰到的情况都是后台接口使用SQL去重，简单高效，基本不会让前端处理去重。</p><p>那么前端处理去重会出现什么情况呢？假如每页显示10条不同的数据，如果数据重复比较严重，那么要显示10条数据，可能需要发送多个http请求才能够筛选出10条不同的数据，而如果在后台就去重了的话，只需一次http请求就能够获取到10条不同的数据。</p><p>当然，这并不是说前端去重就没有必要了，依然需要会熟练使用。本文主要介绍几种常见的数组去重的方法。</p><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><h3 id="双循环去重"><a href="#双循环去重" class="headerlink" title="双循环去重"></a>双循环去重</h3><p>双重for（或while）循环是比较笨拙的方法，它实现的原理很简单：先定义一个包含原始数组第一个元素的数组，然后遍历原始数组，将原始数组中的每个元素与新数组中的每个元素进行比对，如果不重复则添加到新数组中，最后返回新数组；因为它的时间复杂度是O(n^2)，如果数组长度很大，那么将会非常耗费内存</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs maxima">function <span class="hljs-built_in">unique</span>(arr) &#123;<br>    <span class="hljs-keyword">if</span> (!Array.isArray(arr)) &#123;<br>        console.<span class="hljs-built_in">log</span>(&#x27;type <span class="hljs-built_in">error</span>!&#x27;)<br>        <span class="hljs-built_in">return</span><br>    &#125;<br>    <span class="hljs-built_in">let</span> res = [arr[<span class="hljs-number">0</span>]]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-built_in">let</span> flag = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = <span class="hljs-number">0</span>; j &lt; res.<span class="hljs-built_in">length</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] === res[j]) &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-built_in">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            res.<span class="hljs-built_in">push</span>(arr[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> res<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="indexOf方法去重1"><a href="#indexOf方法去重1" class="headerlink" title="indexOf方法去重1"></a>indexOf方法去重1</h3><p>数组的indexOf()方法可返回某个指定的元素在数组中首次出现的位置。该方法首先定义一个空数组res，然后调用indexOf方法对原来的数组进行遍历判断，如果元素不在res中，则将其push进res中，最后将res返回即可获得去重的数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    let res = []<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">indexOf</span>(arr[i]) === <span class="hljs-number">-1</span>) &#123;<br>            res.<span class="hljs-built_in">push</span>(arr[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="indexOf方法去重2"><a href="#indexOf方法去重2" class="headerlink" title="indexOf方法去重2"></a>indexOf方法去重2</h3><p>利用indexOf检测元素在数组中第一次出现的位置是否和元素现在的位置相等，如果不等则说明该元素是重复元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">filter</span>.call(arr, <span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>)&#123;<br>        <span class="hljs-keyword">return</span> arr.<span class="hljs-built_in">indexOf</span>(item) === index;<br>    &#125;);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="相邻元素去重"><a href="#相邻元素去重" class="headerlink" title="相邻元素去重"></a>相邻元素去重</h3><p>这种方法首先调用了数组的排序方法sort()，然后根据排序后的结果进行遍历及相邻元素比对，如果相等则跳过改元素，直到遍历结束</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    arr = arr.<span class="hljs-built_in">sort</span>()<br>    let res = []<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] !== arr[i<span class="hljs-number">-1</span>]) &#123;<br>            res.<span class="hljs-built_in">push</span>(arr[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="利用对象属性去重"><a href="#利用对象属性去重" class="headerlink" title="利用对象属性去重"></a>利用对象属性去重</h3><p>创建空对象，遍历数组，将数组中的值设为对象的属性，并给该属性赋初始值1，每出现一次，对应的属性值增加1，这样，属性值对应的就是该元素出现的次数了</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    let res = [],<br>        obj = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!obj[arr[i]]) &#123;<br>            res.<span class="hljs-built_in">push</span>(arr[i])<br>            obj[arr[i]] = <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            obj[arr[i]]++<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="set与解构赋值去重"><a href="#set与解构赋值去重" class="headerlink" title="set与解构赋值去重"></a>set与解构赋值去重</h3><p>ES6中新增了数据类型set，set的一个最大的特点就是数据不重复。Set函数可以接受一个数组（或类数组对象）作为参数来初始化，利用该特性也能做到给数组去重</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(arr) &#123;<br>    if (!Array.<span class="hljs-keyword">is</span><span class="hljs-keyword">Array</span>(arr)) &#123;<br>        console.log(<span class="hljs-symbol">&#x27;type</span> error!&#x27;)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> Set(arr)]<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="Array-from与set去重"><a href="#Array-from与set去重" class="headerlink" title="Array.from与set去重"></a>Array.from与set去重</h3><p>Array.from方法可以将Set结构转换为数组结果，而我们知道set结果是不重复的数据集，因此能够达到去重的目的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">unique</span>(arr) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">Array</span>.isArray(arr)) &#123;<br>        console.log(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span>(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Set</span>(arr))<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数组去重是开发中经常会碰到的一个热点问题。我们可以根据不同的应用场景来选择不同的实现方式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的Diff算法</title>
    <link href="/2022/04/02/Vue/diff/Diff/"/>
    <url>/2022/04/02/Vue/diff/Diff/</url>
    
    <content type="html"><![CDATA[<h1 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h1><aside>🆕 **Diff算法是一种对比算法**。对比两者是`旧虚拟DOM和新虚拟DOM`，对比出是哪个`虚拟节点`更改了，找出这个`虚拟节点`，并只更新这个虚拟节点所对应的`真实节点`，而不用更新其他数据没发生改变的节点，实现`精准`地更新真实DOM，进而`提高效率`。</aside><p>新旧虚拟DOM对比的时候，Diff算法比较只会在同层级进行, 不会跨层级比较。 所以Diff算法是:<code>深度优先算法</code>。 时间复杂度:<code>O(n)</code></p><h2 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h2><p>当数据改变时，会触发<code>setter</code>，并且通过<code>Dep.notify</code>去通知所有<code>订阅者Watcher</code>，订阅者们就会调用<code>patch方法</code>，给真实DOM打补丁，更新相应的视图。</p><p> <img src="/images/diff/diff7.png" alt="Vue触发Diff的流程"></p><h2 id="核心方法："><a href="#核心方法：" class="headerlink" title="核心方法："></a>核心方法：</h2><h3 id="1-patch方法"><a href="#1-patch方法" class="headerlink" title="1. patch方法"></a>1. patch方法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-comment">// 比较是否为一个类型的节点</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldVnode, newVnode)) &#123; **<span class="hljs-comment">// 重点**</span><br>    <span class="hljs-comment">// 是：继续进行深层比较</span><br>    <span class="hljs-title function_">patchVnode</span>(oldVnode, newVnode) **<span class="hljs-comment">// 重点**</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 否</span><br>    <span class="hljs-keyword">const</span> oldEl = oldVnode.<span class="hljs-property">el</span> <span class="hljs-comment">// 旧虚拟节点的真实DOM节点</span><br>    <span class="hljs-keyword">const</span> parentEle = api.<span class="hljs-title function_">parentNode</span>(oldEl) <span class="hljs-comment">// 获取父节点</span><br>    <span class="hljs-title function_">createEle</span>(newVnode) <span class="hljs-comment">// 创建新虚拟节点对应的真实DOM节点</span><br>    <span class="hljs-keyword">if</span> (parentEle !== <span class="hljs-literal">null</span>) &#123;<br>      api.<span class="hljs-title function_">insertBefore</span>(parentEle, vnode.<span class="hljs-property">el</span>, api.<span class="hljs-title function_">nextSibling</span>(oEl)) <span class="hljs-comment">// 将新元素添加进父元素</span><br>      api.<span class="hljs-title function_">removeChild</span>(parentEle, oldVnode.<span class="hljs-property">el</span>)  <span class="hljs-comment">// 移除以前的旧元素节点</span><br>      <span class="hljs-comment">// 设置null，释放内存</span><br>      oldVnode = <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> newVnode<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法作用就是，对比当前同层的虚拟节点是否为同一种类型的标签<code>(同一类型的标准，下面会讲)</code>：</p><ul><li>是：继续执行<code>patchVnode方法</code>进行深层比对</li><li>否：没必要比对了，直接整个节点替换成<code>新虚拟节点</code></li></ul><h3 id="2-sameVnode方法"><a href="#2-sameVnode方法" class="headerlink" title="2. sameVnode方法"></a>2. <strong>sameVnode方法</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sameVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    oldVnode.<span class="hljs-property">key</span> === newVnode.<span class="hljs-property">key</span> &amp;&amp; <span class="hljs-comment">// key值是否一样</span><br>    oldVnode.<span class="hljs-property">tagName</span> === newVnode.<span class="hljs-property">tagName</span> &amp;&amp; <span class="hljs-comment">// 标签名是否一样</span><br>    oldVnode.<span class="hljs-property">isComment</span> === newVnode.<span class="hljs-property">isComment</span> &amp;&amp; <span class="hljs-comment">// 是否都为注释节点</span><br>    <span class="hljs-title function_">isDef</span>(oldVnode.<span class="hljs-property">data</span>) === <span class="hljs-title function_">isDef</span>(newVnode.<span class="hljs-property">data</span>) &amp;&amp; <span class="hljs-comment">// 是否都定义了data</span><br>    <span class="hljs-title function_">sameInputType</span>(oldVnode, newVnode) <span class="hljs-comment">// 当标签为input时，type必须是否相同</span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>patch关键的一步就是<code>sameVnode方法判断是否为同一类型节点</code></p><h3 id="3-patchVnode方法"><a href="#3-patchVnode方法" class="headerlink" title="3. patchVnode方法"></a>3. <strong>patchVnode方法</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">patchVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-keyword">const</span> el = newVnode.<span class="hljs-property">el</span> = oldVnode.<span class="hljs-property">el</span> <span class="hljs-comment">// 获取真实DOM对象</span><br>  <span class="hljs-comment">// 获取新旧虚拟节点的子节点数组</span><br>  <span class="hljs-keyword">const</span> oldCh = oldVnode.<span class="hljs-property">children</span>, newCh = newVnode.<span class="hljs-property">children</span><br>  <span class="hljs-comment">// 如果新旧虚拟节点是同一个对象，则终止</span><br>  <span class="hljs-keyword">if</span> (oldVnode === newVnode) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// 如果新旧虚拟节点是**文本节点**，且文本不一样</span><br>  <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">text</span> !== <span class="hljs-literal">null</span> &amp;&amp; newVnode.<span class="hljs-property">text</span> !== <span class="hljs-literal">null</span> &amp;&amp; oldVnode.<span class="hljs-property">text</span> !== newVnode.<span class="hljs-property">text</span>) &#123;<br>    <span class="hljs-comment">// 则直接将真实DOM中文本更新为新虚拟节点的文本</span><br>    api.<span class="hljs-title function_">setTextContent</span>(el, newVnode.<span class="hljs-property">text</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 否则</span><br><br>    <span class="hljs-keyword">if</span> (oldCh &amp;&amp; newCh &amp;&amp; oldCh !== newCh) &#123;<br>      <span class="hljs-comment">// 新旧虚拟节点都有子节点，且子节点不一样</span><br><br>      <span class="hljs-comment">// 对比子节点，并更新</span><br>      <span class="hljs-title function_">updateChildren</span>(el, oldCh, newCh) **<span class="hljs-comment">// 重点**</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newCh) &#123;<br>      <span class="hljs-comment">// 新虚拟节点有子节点，旧虚拟节点没有</span><br><br>      <span class="hljs-comment">// 创建新虚拟节点的子节点，并更新到真实DOM上去</span><br>      <span class="hljs-title function_">createEle</span>(newVnode)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldCh) &#123;<br>      <span class="hljs-comment">// 旧虚拟节点有子节点，新虚拟节点没有</span><br><br>      <span class="hljs-comment">//直接删除真实DOM里对应的子节点</span><br>      api.<span class="hljs-title function_">removeChild</span>(el)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数做了以下事情：</p><ul><li>找到对应的<code>真实DOM</code>，称为<code>el</code></li><li>判断<code>newVnode</code>和<code>oldVnode</code>是否指向同一个对象，如果是，那么直接<code>return</code></li><li>如果他们都有文本节点并且不相等，那么将<code>el</code>的文本节点设置为<code>newVnode</code>的文本节点。</li><li>如果<code>oldVnode</code>有子节点而<code>newVnode</code>没有，则删除<code>el</code>的子节点</li><li>如果<code>oldVnode</code>没有子节点而<code>newVnode</code>有，则将<code>newVnode</code>的子节点真实化之后添加到<code>el</code></li><li>如果两者都有子节点，则执行<code>updateChildren</code>函数比较子节点，这一步很重要</li></ul><h3 id="4-updateChildren方法"><a href="#4-updateChildren方法" class="headerlink" title="4. updateChildren方法"></a>4. <strong>updateChildren方法</strong></h3><p>这是<code>patchVnode</code>里最重要的一个方法，新旧虚拟节点的子节点对比，就是发生在<code>updateChildren方法</code>中</p><p>是怎么样一个对比方法呢？就是<code>首尾指针法</code>，新的子节点集合和旧的子节点集合，各有首尾两个指针</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>修改数据后<br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么新旧两个子节点集合以及其首尾指针为：</p><p><img src="/images/diff/diff.png" alt="Untitled"></p><p>然后会进行互相进行比较，总共有五种比较情况：</p><ul><li>1、<code>oldS 和 newS</code> 使用<code>sameVnode方法</code>进行比较，<code>sameVnode(oldS, newS)</code></li><li>2、<code>oldS 和 newE</code> 使用<code>sameVnode方法</code>进行比较，<code>sameVnode(oldS, newE)</code></li><li>3、<code>oldE 和 newS</code> 使用<code>sameVnode方法</code>进行比较，<code>sameVnode(oldE, newS)</code></li><li>4、<code>oldE 和 newE</code> 使用<code>sameVnode方法</code>进行比较，<code>sameVnode(oldE, newE)</code></li><li>5、如果以上逻辑都匹配不到，再把所有旧子节点的 <code>key</code> 做一个映射到旧节点下标的 <code>key -&gt; index</code> 表，然后用新 <code>vnode</code> 的 <code>key</code> 去找出在旧节点中可以复用的位置。</li></ul><p><img src="/images/diff/diff1.png" alt="Untitled"></p><h2 id="分析过程："><a href="#分析过程：" class="headerlink" title="分析过程："></a>分析过程：</h2><p><img src="/images/diff/diff2.png" alt="Untitled"></p><ul><li>第一步</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">oldS = a, oldE = c<br>newS = b, newE = a<br></code></pre></td></tr></table></figure><p>比较结果：<code>oldS 和 newE</code>相等，需要把<code>节点a</code>移动到<code>newE</code>所对应的位置，也就是末尾，同时<code>oldS++</code>，<code>newE--</code></p><p><img src="/images/diff/diff3.png" alt="Untitled"></p><ul><li>第二步</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">oldS = b, oldE = c<br>newS = b, newE = e<br></code></pre></td></tr></table></figure><p>比较结果：<code>oldS 和 newS</code>相等，需要把<code>节点b</code>移动到<code>newS</code>所对应的位置，同时<code>oldS++</code>,<code>newS++</code></p><p><img src="/images/diff/diff4.png" alt="Untitled"></p><ul><li>第三步</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">oldS = c, oldE = c<br>newS = c, newE = e<br></code></pre></td></tr></table></figure><p>比较结果：<code>oldS、oldE 和 newS</code>相等，需要把<code>节点c</code>移动到<code>newS</code>所对应的位置，同时<code>oldS++</code>,<code>newS++</code></p><p><img src="/images/diff/diff5.png" alt="Untitled"></p><ul><li>第四步</li></ul><p><code>oldS &gt; oldE</code>，则<code>oldCh</code>先遍历完成了，而<code>newCh</code>还没遍历完，说明<code>newCh比oldCh多</code>，所以需要将多出来的节点，插入到真实DOM上对应的位置上</p><p><img src="/images/diff/diff6.png" alt="Untitled"></p></blockquote><p><code>updateChildren</code>的核心原理代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChildren</span>(<span class="hljs-params">parentElm, oldCh, newCh</span>) &#123;<br>  <span class="hljs-keyword">let</span> oldStartIdx = <span class="hljs-number">0</span>, newStartIdx = <span class="hljs-number">0</span> <span class="hljs-comment">//旧节点数组与新节点数组的下标</span><br>  <span class="hljs-keyword">let</span> oldEndIdx = oldCh.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> oldStartVnode = oldCh[<span class="hljs-number">0</span>] <span class="hljs-comment">//旧节点数组第一个子节点</span><br>  <span class="hljs-keyword">let</span> oldEndVnode = oldCh[oldEndIdx]<br>  <span class="hljs-keyword">let</span> newEndIdx = newCh.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> newStartVnode = newCh[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">let</span> newEndVnode = newCh[newEndIdx] <span class="hljs-comment">// 准备工作</span><br>  <span class="hljs-keyword">let</span> oldKeyToIdx<br>  <span class="hljs-keyword">let</span> idxInOld<br>  <span class="hljs-keyword">let</span> elmToMove<br>  <span class="hljs-keyword">let</span> before<br>  <span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>    <span class="hljs-keyword">if</span> (oldStartVnode == <span class="hljs-literal">null</span>) &#123;<br>      oldStartVnode = oldCh[++oldStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldEndVnode == <span class="hljs-literal">null</span>) &#123;<br>      oldEndVnode = oldCh[--oldEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newStartVnode == <span class="hljs-literal">null</span>) &#123;<br>      newStartVnode = newCh[++newStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newEndVnode == <span class="hljs-literal">null</span>) &#123;<br>      newEndVnode = newCh[--newEndIdx] <span class="hljs-comment">//先判断节点是否为null</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;<br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newStartVnode)<br>      oldStartVnode = oldCh[++oldStartIdx]<br>      newStartVnode = newCh[++newStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;<br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newEndVnode)<br>      oldEndVnode = oldCh[--oldEndIdx]<br>      newEndVnode = newCh[--newEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;<br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newEndVnode)<br>      api.<span class="hljs-title function_">insertBefore</span>(parentElm, oldStartVnode.<span class="hljs-property">el</span>, api.<span class="hljs-title function_">nextSibling</span>(oldEndVnode.<span class="hljs-property">el</span>))<br>      oldStartVnode = oldCh[++oldStartIdx]<br>      newEndVnode = newCh[--newEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;<br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newStartVnode)<br>      api.<span class="hljs-title function_">insertBefore</span>(parentElm, oldEndVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>)<br>      oldEndVnode = oldCh[--oldEndIdx]<br>      newStartVnode = newCh[++newStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 使用key时的比较</span><br>      <span class="hljs-keyword">if</span> (oldKeyToIdx === <span class="hljs-literal">undefined</span>) &#123;<br>        oldKeyToIdx = <span class="hljs-title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx) <span class="hljs-comment">// 有key生成index表</span><br>      &#125;<br>      idxInOld = oldKeyToIdx[newStartVnode.<span class="hljs-property">key</span>]<br>      <span class="hljs-keyword">if</span> (!idxInOld) &#123;<br>        api.<span class="hljs-title function_">insertBefore</span>(parentElm, <span class="hljs-title function_">createEle</span>(newStartVnode).<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>)<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        elmToMove = oldCh[idxInOld]<br>        <span class="hljs-keyword">if</span> (elmToMove.<span class="hljs-property">sel</span> !== newStartVnode.<span class="hljs-property">sel</span>) &#123;<br>          api.<span class="hljs-title function_">insertBefore</span>(parentElm, <span class="hljs-title function_">createEle</span>(newStartVnode).<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">patchVnode</span>(elmToMove, newStartVnode)<br>          oldCh[idxInOld] = <span class="hljs-literal">null</span><br>          api.<span class="hljs-title function_">insertBefore</span>(parentElm, elmToMove.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>)<br>        &#125;<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>    before = newCh[newEndIdx + <span class="hljs-number">1</span>] == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : newCh[newEndIdx + <span class="hljs-number">1</span>].<span class="hljs-property">el</span><br>    <span class="hljs-title function_">addVnodes</span>(parentElm, before, newCh, newStartIdx, newEndIdx)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>    <span class="hljs-title function_">removeVnodes</span>(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://juejin.cn/post/6994959998283907102">15张图，20分钟吃透Diff算法核心原理，我说的！！！ - 掘金</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2022/03/30/about/index/"/>
    <url>/2022/03/30/about/index/</url>
    
    <content type="html"><![CDATA[<h1 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/29/hello-world/"/>
    <url>/2022/03/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
